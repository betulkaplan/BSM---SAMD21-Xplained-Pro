
BSMCPPMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001544  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  00001544  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018c  2000042c  00001970  0002042c  2**2
                  ALLOC
  3 .stack        00002000  200005b8  00001afc  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
  6 .debug_info   000241aa  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b7c  00000000  00000000  00044657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000da78  00000000  00000000  000471d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b00  00000000  00000000  00054c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000be8  00000000  00000000  0005574b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000199e6  00000000  00000000  00056333  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ea39  00000000  00000000  0006fd19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088c18  00000000  00000000  0007e752  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e90  00000000  00000000  0010736c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 25 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .%. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	f1 0c 00 00 21 01 00 00 b9 0b 00 00 21 01 00 00     ....!.......!...
      5c:	21 01 00 00 21 01 00 00 15 10 00 00 21 01 00 00     !...!.......!...
      6c:	21 01 00 00 29 10 00 00 21 01 00 00 21 01 00 00     !...)...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000042c 	.word	0x2000042c
      d4:	00000000 	.word	0x00000000
      d8:	00001544 	.word	0x00001544

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000430 	.word	0x20000430
     108:	00001544 	.word	0x00001544
     10c:	00001544 	.word	0x00001544
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000395 	.word	0x00000395

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00001544 	.word	0x00001544
     1b8:	20000000 	.word	0x20000000
     1bc:	2000042c 	.word	0x2000042c
     1c0:	2000042c 	.word	0x2000042c
     1c4:	200005b8 	.word	0x200005b8
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	0000121d 	.word	0x0000121d
     1e4:	000011f9 	.word	0x000011f9

000001e8 <TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_init(void)
{
     1e8:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     1ea:	4a08      	ldr	r2, [pc, #32]	; (20c <TIMER_init+0x24>)
     1ec:	6993      	ldr	r3, [r2, #24]
     1ee:	2120      	movs	r1, #32
     1f0:	430b      	orrs	r3, r1
     1f2:	6193      	str	r3, [r2, #24]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1f4:	4a06      	ldr	r2, [pc, #24]	; (210 <TIMER_init+0x28>)
     1f6:	4b07      	ldr	r3, [pc, #28]	; (214 <TIMER_init+0x2c>)
     1f8:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER, RTC, _rtc_get_timer());
     1fa:	4b07      	ldr	r3, [pc, #28]	; (218 <TIMER_init+0x30>)
     1fc:	4798      	blx	r3
     1fe:	0002      	movs	r2, r0
     200:	4906      	ldr	r1, [pc, #24]	; (21c <TIMER_init+0x34>)
     202:	4807      	ldr	r0, [pc, #28]	; (220 <TIMER_init+0x38>)
     204:	4b07      	ldr	r3, [pc, #28]	; (224 <TIMER_init+0x3c>)
     206:	4798      	blx	r3
}
     208:	bd10      	pop	{r4, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	40000400 	.word	0x40000400
     210:	00004004 	.word	0x00004004
     214:	40000c00 	.word	0x40000c00
     218:	00000ced 	.word	0x00000ced
     21c:	40001400 	.word	0x40001400
     220:	200004bc 	.word	0x200004bc
     224:	00000561 	.word	0x00000561

00000228 <FLASH_CLOCK_init>:
		break;
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
     228:	4a02      	ldr	r2, [pc, #8]	; (234 <FLASH_CLOCK_init+0xc>)
     22a:	69d3      	ldr	r3, [r2, #28]
     22c:	2104      	movs	r1, #4
     22e:	430b      	orrs	r3, r1
     230:	61d3      	str	r3, [r2, #28]
}
     232:	4770      	bx	lr
     234:	40000400 	.word	0x40000400

00000238 <FLASH_init>:
{
     238:	b510      	push	{r4, lr}
	FLASH_CLOCK_init();
     23a:	4b03      	ldr	r3, [pc, #12]	; (248 <FLASH_init+0x10>)
     23c:	4798      	blx	r3
	flash_init(&FLASH, NVMCTRL);
     23e:	4903      	ldr	r1, [pc, #12]	; (24c <FLASH_init+0x14>)
     240:	4803      	ldr	r0, [pc, #12]	; (250 <FLASH_init+0x18>)
     242:	4b04      	ldr	r3, [pc, #16]	; (254 <FLASH_init+0x1c>)
     244:	4798      	blx	r3
}
     246:	bd10      	pop	{r4, pc}
     248:	00000229 	.word	0x00000229
     24c:	41004000 	.word	0x41004000
     250:	200004d8 	.word	0x200004d8
     254:	00000421 	.word	0x00000421

00000258 <serial_knx_CLOCK_init>:
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     258:	4a04      	ldr	r2, [pc, #16]	; (26c <serial_knx_CLOCK_init+0x14>)
     25a:	6a13      	ldr	r3, [r2, #32]
     25c:	2104      	movs	r1, #4
     25e:	430b      	orrs	r3, r1
     260:	6213      	str	r3, [r2, #32]
     262:	4a03      	ldr	r2, [pc, #12]	; (270 <serial_knx_CLOCK_init+0x18>)
     264:	4b03      	ldr	r3, [pc, #12]	; (274 <serial_knx_CLOCK_init+0x1c>)
     266:	805a      	strh	r2, [r3, #2]
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40000400 	.word	0x40000400
     270:	00004214 	.word	0x00004214
     274:	40000c00 	.word	0x40000c00

00000278 <serial_knx_PORT_init>:
{
     278:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <serial_knx_PORT_init+0x40>)
     27c:	2244      	movs	r2, #68	; 0x44
     27e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     280:	2501      	movs	r5, #1
     282:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     284:	2401      	movs	r4, #1
     286:	4321      	orrs	r1, r4
     288:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     28c:	2032      	movs	r0, #50	; 0x32
     28e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     290:	3a35      	subs	r2, #53	; 0x35
     292:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     294:	2203      	movs	r2, #3
     296:	4311      	orrs	r1, r2
     298:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29c:	2145      	movs	r1, #69	; 0x45
     29e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a2:	4322      	orrs	r2, r4
     2a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2aa:	3936      	subs	r1, #54	; 0x36
     2ac:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2ae:	2130      	movs	r1, #48	; 0x30
     2b0:	430a      	orrs	r2, r1
     2b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b4:	541a      	strb	r2, [r3, r0]
}
     2b6:	bd30      	pop	{r4, r5, pc}
     2b8:	41004400 	.word	0x41004400

000002bc <serial_knx_init>:
{
     2bc:	b510      	push	{r4, lr}
     2be:	b082      	sub	sp, #8
	serial_knx_CLOCK_init();
     2c0:	4b06      	ldr	r3, [pc, #24]	; (2dc <serial_knx_init+0x20>)
     2c2:	4798      	blx	r3
	usart_async_init(&serial_knx, SERCOM0, serial_knx_buffer, SERIAL_KNX_BUFFER_SIZE, (void *)NULL);
     2c4:	2300      	movs	r3, #0
     2c6:	9300      	str	r3, [sp, #0]
     2c8:	3310      	adds	r3, #16
     2ca:	4a05      	ldr	r2, [pc, #20]	; (2e0 <serial_knx_init+0x24>)
     2cc:	4905      	ldr	r1, [pc, #20]	; (2e4 <serial_knx_init+0x28>)
     2ce:	4806      	ldr	r0, [pc, #24]	; (2e8 <serial_knx_init+0x2c>)
     2d0:	4c06      	ldr	r4, [pc, #24]	; (2ec <serial_knx_init+0x30>)
     2d2:	47a0      	blx	r4
	serial_knx_PORT_init();
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <serial_knx_init+0x34>)
     2d6:	4798      	blx	r3
}
     2d8:	b002      	add	sp, #8
     2da:	bd10      	pop	{r4, pc}
     2dc:	00000259 	.word	0x00000259
     2e0:	20000448 	.word	0x20000448
     2e4:	42000800 	.word	0x42000800
     2e8:	20000544 	.word	0x20000544
     2ec:	000007fd 	.word	0x000007fd
     2f0:	00000279 	.word	0x00000279

000002f4 <serial_bsm_CLOCK_init>:
     2f4:	4a04      	ldr	r2, [pc, #16]	; (308 <serial_bsm_CLOCK_init+0x14>)
     2f6:	6a13      	ldr	r3, [r2, #32]
     2f8:	2120      	movs	r1, #32
     2fa:	430b      	orrs	r3, r1
     2fc:	6213      	str	r3, [r2, #32]
     2fe:	4a03      	ldr	r2, [pc, #12]	; (30c <serial_bsm_CLOCK_init+0x18>)
     300:	4b03      	ldr	r3, [pc, #12]	; (310 <serial_bsm_CLOCK_init+0x1c>)
     302:	805a      	strh	r2, [r3, #2]
}
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40000400 	.word	0x40000400
     30c:	00004317 	.word	0x00004317
     310:	40000c00 	.word	0x40000c00

00000314 <serial_bsm_PORT_init>:
{
     314:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <serial_bsm_PORT_init+0x40>)
     318:	2256      	movs	r2, #86	; 0x56
     31a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	2501      	movs	r5, #1
     31e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     320:	2401      	movs	r4, #1
     322:	4321      	orrs	r1, r4
     324:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     326:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     328:	203b      	movs	r0, #59	; 0x3b
     32a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     32c:	3a47      	subs	r2, #71	; 0x47
     32e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     330:	2202      	movs	r2, #2
     332:	4311      	orrs	r1, r2
     334:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     336:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     338:	2157      	movs	r1, #87	; 0x57
     33a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     33c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33e:	4322      	orrs	r2, r4
     340:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     342:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     344:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     346:	3948      	subs	r1, #72	; 0x48
     348:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     34a:	2120      	movs	r1, #32
     34c:	430a      	orrs	r2, r1
     34e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     350:	541a      	strb	r2, [r3, r0]
}
     352:	bd30      	pop	{r4, r5, pc}
     354:	41004400 	.word	0x41004400

00000358 <serial_bsm_init>:
{
     358:	b510      	push	{r4, lr}
     35a:	b082      	sub	sp, #8
	serial_bsm_CLOCK_init();
     35c:	4b07      	ldr	r3, [pc, #28]	; (37c <serial_bsm_init+0x24>)
     35e:	4798      	blx	r3
	usart_async_init(&serial_bsm, SERCOM3, serial_bsm_buffer, SERIAL_BSM_BUFFER_SIZE, (void *)NULL);
     360:	2300      	movs	r3, #0
     362:	9300      	str	r3, [sp, #0]
     364:	3310      	adds	r3, #16
     366:	4a06      	ldr	r2, [pc, #24]	; (380 <serial_bsm_init+0x28>)
     368:	3210      	adds	r2, #16
     36a:	4906      	ldr	r1, [pc, #24]	; (384 <serial_bsm_init+0x2c>)
     36c:	4806      	ldr	r0, [pc, #24]	; (388 <serial_bsm_init+0x30>)
     36e:	4c07      	ldr	r4, [pc, #28]	; (38c <serial_bsm_init+0x34>)
     370:	47a0      	blx	r4
	serial_bsm_PORT_init();
     372:	4b07      	ldr	r3, [pc, #28]	; (390 <serial_bsm_init+0x38>)
     374:	4798      	blx	r3
}
     376:	b002      	add	sp, #8
     378:	bd10      	pop	{r4, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	000002f5 	.word	0x000002f5
     380:	20000448 	.word	0x20000448
     384:	42001400 	.word	0x42001400
     388:	200004f4 	.word	0x200004f4
     38c:	000007fd 	.word	0x000007fd
     390:	00000315 	.word	0x00000315

00000394 <system_init>:

void system_init(void)
{
     394:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     396:	4b0e      	ldr	r3, [pc, #56]	; (3d0 <system_init+0x3c>)
     398:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     39a:	23c0      	movs	r3, #192	; 0xc0
     39c:	05db      	lsls	r3, r3, #23
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	05d2      	lsls	r2, r2, #23
     3a2:	2194      	movs	r1, #148	; 0x94
     3a4:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3a6:	390c      	subs	r1, #12
     3a8:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3aa:	4b0a      	ldr	r3, [pc, #40]	; (3d4 <system_init+0x40>)
     3ac:	3120      	adds	r1, #32
     3ae:	505a      	str	r2, [r3, r1]
     3b0:	4a09      	ldr	r2, [pc, #36]	; (3d8 <system_init+0x44>)
     3b2:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b4:	3136      	adds	r1, #54	; 0x36
     3b6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b8:	2001      	movs	r0, #1
     3ba:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3bc:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(myLed, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(myLed, GPIO_PIN_FUNCTION_OFF);

	FLASH_init();
     3be:	4b07      	ldr	r3, [pc, #28]	; (3dc <system_init+0x48>)
     3c0:	4798      	blx	r3

	serial_knx_init();
     3c2:	4b07      	ldr	r3, [pc, #28]	; (3e0 <system_init+0x4c>)
     3c4:	4798      	blx	r3
	serial_bsm_init();
     3c6:	4b07      	ldr	r3, [pc, #28]	; (3e4 <system_init+0x50>)
     3c8:	4798      	blx	r3

	TIMER_init();
     3ca:	4b07      	ldr	r3, [pc, #28]	; (3e8 <system_init+0x54>)
     3cc:	4798      	blx	r3
}
     3ce:	bd10      	pop	{r4, pc}
     3d0:	00000ad1 	.word	0x00000ad1
     3d4:	41004400 	.word	0x41004400
     3d8:	c0004000 	.word	0xc0004000
     3dc:	00000239 	.word	0x00000239
     3e0:	000002bd 	.word	0x000002bd
     3e4:	00000359 	.word	0x00000359
     3e8:	000001e9 	.word	0x000001e9

000003ec <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     3ec:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     3f0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     3f2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     3f4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     3f8:	4770      	bx	lr

000003fa <atomic_leave_critical>:
     3fa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     3fe:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     400:	f383 8810 	msr	PRIMASK, r3
}
     404:	4770      	bx	lr

00000406 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     406:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     408:	6943      	ldr	r3, [r0, #20]
     40a:	2b00      	cmp	r3, #0
     40c:	d000      	beq.n	410 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
     40e:	4798      	blx	r3
	}
}
     410:	bd10      	pop	{r4, pc}

00000412 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     412:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     414:	6983      	ldr	r3, [r0, #24]
     416:	2b00      	cmp	r3, #0
     418:	d000      	beq.n	41c <flash_error+0xa>
		descr->callbacks.cb_error(descr);
     41a:	4798      	blx	r3
	}
}
     41c:	bd10      	pop	{r4, pc}
	...

00000420 <flash_init>:
{
     420:	b570      	push	{r4, r5, r6, lr}
     422:	0004      	movs	r4, r0
     424:	000d      	movs	r5, r1
	ASSERT(flash && hw);
     426:	2800      	cmp	r0, #0
     428:	d013      	beq.n	452 <flash_init+0x32>
     42a:	2900      	cmp	r1, #0
     42c:	d00f      	beq.n	44e <flash_init+0x2e>
     42e:	2001      	movs	r0, #1
     430:	2238      	movs	r2, #56	; 0x38
     432:	4909      	ldr	r1, [pc, #36]	; (458 <flash_init+0x38>)
     434:	4b09      	ldr	r3, [pc, #36]	; (45c <flash_init+0x3c>)
     436:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     438:	0029      	movs	r1, r5
     43a:	0020      	movs	r0, r4
     43c:	4b08      	ldr	r3, [pc, #32]	; (460 <flash_init+0x40>)
     43e:	4798      	blx	r3
	if (rc) {
     440:	2800      	cmp	r0, #0
     442:	d103      	bne.n	44c <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
     444:	4b07      	ldr	r3, [pc, #28]	; (464 <flash_init+0x44>)
     446:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <flash_init+0x48>)
     44a:	6063      	str	r3, [r4, #4]
}
     44c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
     44e:	2000      	movs	r0, #0
     450:	e7ee      	b.n	430 <flash_init+0x10>
     452:	2000      	movs	r0, #0
     454:	e7ec      	b.n	430 <flash_init+0x10>
     456:	46c0      	nop			; (mov r8, r8)
     458:	000013bc 	.word	0x000013bc
     45c:	0000096d 	.word	0x0000096d
     460:	00000b59 	.word	0x00000b59
     464:	00000407 	.word	0x00000407
     468:	00000413 	.word	0x00000413

0000046c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     46c:	b570      	push	{r4, r5, r6, lr}
     46e:	0004      	movs	r4, r0
     470:	000d      	movs	r5, r1
     472:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     474:	2800      	cmp	r0, #0
     476:	d00e      	beq.n	496 <io_read+0x2a>
     478:	2900      	cmp	r1, #0
     47a:	d00a      	beq.n	492 <io_read+0x26>
     47c:	2001      	movs	r0, #1
     47e:	223d      	movs	r2, #61	; 0x3d
     480:	4906      	ldr	r1, [pc, #24]	; (49c <io_read+0x30>)
     482:	4b07      	ldr	r3, [pc, #28]	; (4a0 <io_read+0x34>)
     484:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     486:	6863      	ldr	r3, [r4, #4]
     488:	0032      	movs	r2, r6
     48a:	0029      	movs	r1, r5
     48c:	0020      	movs	r0, r4
     48e:	4798      	blx	r3
}
     490:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     492:	2000      	movs	r0, #0
     494:	e7f3      	b.n	47e <io_read+0x12>
     496:	2000      	movs	r0, #0
     498:	e7f1      	b.n	47e <io_read+0x12>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	000013d4 	.word	0x000013d4
     4a0:	0000096d 	.word	0x0000096d

000004a4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     4a6:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     4a8:	2e00      	cmp	r6, #0
     4aa:	d002      	beq.n	4b2 <timer_add_timer_task+0xe>
     4ac:	0033      	movs	r3, r6
     4ae:	2500      	movs	r5, #0
     4b0:	e00c      	b.n	4cc <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     4b2:	4b10      	ldr	r3, [pc, #64]	; (4f4 <timer_add_timer_task+0x50>)
     4b4:	4798      	blx	r3
		return;
     4b6:	e018      	b.n	4ea <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     4b8:	689f      	ldr	r7, [r3, #8]
     4ba:	46bc      	mov	ip, r7
     4bc:	4464      	add	r4, ip
     4be:	1aa4      	subs	r4, r4, r2
     4c0:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     4c2:	688f      	ldr	r7, [r1, #8]
     4c4:	42bc      	cmp	r4, r7
     4c6:	d20b      	bcs.n	4e0 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     4c8:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     4ca:	681b      	ldr	r3, [r3, #0]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d007      	beq.n	4e0 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     4d0:	685c      	ldr	r4, [r3, #4]
     4d2:	4294      	cmp	r4, r2
     4d4:	d8f0      	bhi.n	4b8 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     4d6:	1aa4      	subs	r4, r4, r2
     4d8:	689f      	ldr	r7, [r3, #8]
     4da:	46bc      	mov	ip, r7
     4dc:	4464      	add	r4, ip
     4de:	e7f0      	b.n	4c2 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     4e0:	42b3      	cmp	r3, r6
     4e2:	d003      	beq.n	4ec <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     4e4:	0028      	movs	r0, r5
     4e6:	4b04      	ldr	r3, [pc, #16]	; (4f8 <timer_add_timer_task+0x54>)
     4e8:	4798      	blx	r3
	}
}
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     4ec:	4b01      	ldr	r3, [pc, #4]	; (4f4 <timer_add_timer_task+0x50>)
     4ee:	4798      	blx	r3
     4f0:	e7fb      	b.n	4ea <timer_add_timer_task+0x46>
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	0000098d 	.word	0x0000098d
     4f8:	000009b9 	.word	0x000009b9

000004fc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4fe:	0005      	movs	r5, r0
     500:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     502:	6903      	ldr	r3, [r0, #16]
     504:	1c5e      	adds	r6, r3, #1
     506:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     508:	7e03      	ldrb	r3, [r0, #24]
     50a:	07db      	lsls	r3, r3, #31
     50c:	d402      	bmi.n	514 <timer_process_counted+0x18>
     50e:	7e03      	ldrb	r3, [r0, #24]
     510:	079b      	lsls	r3, r3, #30
     512:	d50a      	bpl.n	52a <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     514:	7e2b      	ldrb	r3, [r5, #24]
     516:	2202      	movs	r2, #2
     518:	4313      	orrs	r3, r2
     51a:	b2db      	uxtb	r3, r3
     51c:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     520:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     522:	68e3      	ldr	r3, [r4, #12]
     524:	0020      	movs	r0, r4
     526:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     528:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     52a:	2c00      	cmp	r4, #0
     52c:	d0f7      	beq.n	51e <timer_process_counted+0x22>
     52e:	6863      	ldr	r3, [r4, #4]
     530:	1af3      	subs	r3, r6, r3
     532:	68a2      	ldr	r2, [r4, #8]
     534:	4293      	cmp	r3, r2
     536:	d3f2      	bcc.n	51e <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     538:	002f      	movs	r7, r5
     53a:	3714      	adds	r7, #20
     53c:	0038      	movs	r0, r7
     53e:	4b06      	ldr	r3, [pc, #24]	; (558 <timer_process_counted+0x5c>)
     540:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     542:	7c23      	ldrb	r3, [r4, #16]
     544:	2b01      	cmp	r3, #1
     546:	d1eb      	bne.n	520 <timer_process_counted+0x24>
			tmp->time_label = time;
     548:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     54a:	0032      	movs	r2, r6
     54c:	0021      	movs	r1, r4
     54e:	0038      	movs	r0, r7
     550:	4b02      	ldr	r3, [pc, #8]	; (55c <timer_process_counted+0x60>)
     552:	4798      	blx	r3
     554:	e7e4      	b.n	520 <timer_process_counted+0x24>
     556:	46c0      	nop			; (mov r8, r8)
     558:	000009c1 	.word	0x000009c1
     55c:	000004a5 	.word	0x000004a5

00000560 <timer_init>:
{
     560:	b570      	push	{r4, r5, r6, lr}
     562:	0004      	movs	r4, r0
     564:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     566:	2800      	cmp	r0, #0
     568:	d012      	beq.n	590 <timer_init+0x30>
     56a:	2900      	cmp	r1, #0
     56c:	d00e      	beq.n	58c <timer_init+0x2c>
     56e:	2001      	movs	r0, #1
     570:	223b      	movs	r2, #59	; 0x3b
     572:	4908      	ldr	r1, [pc, #32]	; (594 <timer_init+0x34>)
     574:	4b08      	ldr	r3, [pc, #32]	; (598 <timer_init+0x38>)
     576:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     578:	0029      	movs	r1, r5
     57a:	0020      	movs	r0, r4
     57c:	4b07      	ldr	r3, [pc, #28]	; (59c <timer_init+0x3c>)
     57e:	4798      	blx	r3
	descr->time                           = 0;
     580:	2300      	movs	r3, #0
     582:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <timer_init+0x40>)
     586:	6023      	str	r3, [r4, #0]
}
     588:	2000      	movs	r0, #0
     58a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     58c:	2000      	movs	r0, #0
     58e:	e7ef      	b.n	570 <timer_init+0x10>
     590:	2000      	movs	r0, #0
     592:	e7ed      	b.n	570 <timer_init+0x10>
     594:	000013e8 	.word	0x000013e8
     598:	0000096d 	.word	0x0000096d
     59c:	00000c25 	.word	0x00000c25
     5a0:	000004fd 	.word	0x000004fd

000005a4 <timer_start>:
{
     5a4:	b510      	push	{r4, lr}
     5a6:	0004      	movs	r4, r0
	ASSERT(descr);
     5a8:	1e43      	subs	r3, r0, #1
     5aa:	4198      	sbcs	r0, r3
     5ac:	b2c0      	uxtb	r0, r0
     5ae:	2253      	movs	r2, #83	; 0x53
     5b0:	4907      	ldr	r1, [pc, #28]	; (5d0 <timer_start+0x2c>)
     5b2:	4b08      	ldr	r3, [pc, #32]	; (5d4 <timer_start+0x30>)
     5b4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     5b6:	0020      	movs	r0, r4
     5b8:	4b07      	ldr	r3, [pc, #28]	; (5d8 <timer_start+0x34>)
     5ba:	4798      	blx	r3
     5bc:	2800      	cmp	r0, #0
     5be:	d104      	bne.n	5ca <timer_start+0x26>
	_timer_start(&descr->device);
     5c0:	0020      	movs	r0, r4
     5c2:	4b06      	ldr	r3, [pc, #24]	; (5dc <timer_start+0x38>)
     5c4:	4798      	blx	r3
	return ERR_NONE;
     5c6:	2000      	movs	r0, #0
}
     5c8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     5ca:	2011      	movs	r0, #17
     5cc:	4240      	negs	r0, r0
     5ce:	e7fb      	b.n	5c8 <timer_start+0x24>
     5d0:	000013e8 	.word	0x000013e8
     5d4:	0000096d 	.word	0x0000096d
     5d8:	00000cd9 	.word	0x00000cd9
     5dc:	00000c81 	.word	0x00000c81

000005e0 <timer_add_task>:
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	0004      	movs	r4, r0
     5e6:	000d      	movs	r5, r1
	ASSERT(descr && task);
     5e8:	2800      	cmp	r0, #0
     5ea:	d026      	beq.n	63a <timer_add_task+0x5a>
     5ec:	2900      	cmp	r1, #0
     5ee:	d022      	beq.n	636 <timer_add_task+0x56>
     5f0:	2001      	movs	r0, #1
     5f2:	227a      	movs	r2, #122	; 0x7a
     5f4:	491f      	ldr	r1, [pc, #124]	; (674 <timer_add_task+0x94>)
     5f6:	4b20      	ldr	r3, [pc, #128]	; (678 <timer_add_task+0x98>)
     5f8:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     5fa:	7e23      	ldrb	r3, [r4, #24]
     5fc:	2201      	movs	r2, #1
     5fe:	4313      	orrs	r3, r2
     600:	b2db      	uxtb	r3, r3
     602:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     604:	0026      	movs	r6, r4
     606:	3614      	adds	r6, #20
     608:	0029      	movs	r1, r5
     60a:	0030      	movs	r0, r6
     60c:	4b1b      	ldr	r3, [pc, #108]	; (67c <timer_add_task+0x9c>)
     60e:	4798      	blx	r3
     610:	2800      	cmp	r0, #0
     612:	d114      	bne.n	63e <timer_add_task+0x5e>
	task->time_label = descr->time;
     614:	6923      	ldr	r3, [r4, #16]
     616:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     618:	6922      	ldr	r2, [r4, #16]
     61a:	0029      	movs	r1, r5
     61c:	0030      	movs	r0, r6
     61e:	4b18      	ldr	r3, [pc, #96]	; (680 <timer_add_task+0xa0>)
     620:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     622:	7e23      	ldrb	r3, [r4, #24]
     624:	2201      	movs	r2, #1
     626:	4393      	bics	r3, r2
     628:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     62a:	7e23      	ldrb	r3, [r4, #24]
     62c:	079b      	lsls	r3, r3, #30
     62e:	d412      	bmi.n	656 <timer_add_task+0x76>
	return ERR_NONE;
     630:	2000      	movs	r0, #0
}
     632:	b002      	add	sp, #8
     634:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     636:	2000      	movs	r0, #0
     638:	e7db      	b.n	5f2 <timer_add_task+0x12>
     63a:	2000      	movs	r0, #0
     63c:	e7d9      	b.n	5f2 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     63e:	7e23      	ldrb	r3, [r4, #24]
     640:	2201      	movs	r2, #1
     642:	4393      	bics	r3, r2
     644:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     646:	327e      	adds	r2, #126	; 0x7e
     648:	490a      	ldr	r1, [pc, #40]	; (674 <timer_add_task+0x94>)
     64a:	2000      	movs	r0, #0
     64c:	4b0a      	ldr	r3, [pc, #40]	; (678 <timer_add_task+0x98>)
     64e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     650:	2012      	movs	r0, #18
     652:	4240      	negs	r0, r0
     654:	e7ed      	b.n	632 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     656:	a801      	add	r0, sp, #4
     658:	4b0a      	ldr	r3, [pc, #40]	; (684 <timer_add_task+0xa4>)
     65a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     65c:	7e23      	ldrb	r3, [r4, #24]
     65e:	2202      	movs	r2, #2
     660:	4393      	bics	r3, r2
     662:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     664:	0020      	movs	r0, r4
     666:	4b08      	ldr	r3, [pc, #32]	; (688 <timer_add_task+0xa8>)
     668:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     66a:	a801      	add	r0, sp, #4
     66c:	4b07      	ldr	r3, [pc, #28]	; (68c <timer_add_task+0xac>)
     66e:	4798      	blx	r3
	return ERR_NONE;
     670:	2000      	movs	r0, #0
     672:	e7de      	b.n	632 <timer_add_task+0x52>
     674:	000013e8 	.word	0x000013e8
     678:	0000096d 	.word	0x0000096d
     67c:	00000975 	.word	0x00000975
     680:	000004a5 	.word	0x000004a5
     684:	000003ed 	.word	0x000003ed
     688:	00000ceb 	.word	0x00000ceb
     68c:	000003fb 	.word	0x000003fb

00000690 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     690:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     692:	3808      	subs	r0, #8

	descr->stat = 0;
     694:	2300      	movs	r3, #0
     696:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     698:	6a43      	ldr	r3, [r0, #36]	; 0x24
     69a:	2b00      	cmp	r3, #0
     69c:	d000      	beq.n	6a0 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     69e:	4798      	blx	r3
	}
}
     6a0:	bd10      	pop	{r4, pc}

000006a2 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     6a2:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     6a4:	3808      	subs	r0, #8

	descr->stat = 0;
     6a6:	2300      	movs	r3, #0
     6a8:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     6aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     6ac:	2b00      	cmp	r3, #0
     6ae:	d000      	beq.n	6b2 <usart_error+0x10>
		descr->usart_cb.error(descr);
     6b0:	4798      	blx	r3
	}
}
     6b2:	bd10      	pop	{r4, pc}

000006b4 <usart_fill_rx_buffer>:
{
     6b4:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     6b6:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     6b8:	302c      	adds	r0, #44	; 0x2c
     6ba:	4b04      	ldr	r3, [pc, #16]	; (6cc <usart_fill_rx_buffer+0x18>)
     6bc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     6be:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     6c0:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     6c2:	2b00      	cmp	r3, #0
     6c4:	d001      	beq.n	6ca <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     6c6:	0020      	movs	r0, r4
     6c8:	4798      	blx	r3
}
     6ca:	bd10      	pop	{r4, pc}
     6cc:	00000a6d 	.word	0x00000a6d

000006d0 <usart_async_write>:
{
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	0004      	movs	r4, r0
     6d4:	000e      	movs	r6, r1
     6d6:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     6d8:	2800      	cmp	r0, #0
     6da:	d01d      	beq.n	718 <usart_async_write+0x48>
     6dc:	2900      	cmp	r1, #0
     6de:	d01d      	beq.n	71c <usart_async_write+0x4c>
     6e0:	2a00      	cmp	r2, #0
     6e2:	d11d      	bne.n	720 <usart_async_write+0x50>
     6e4:	2000      	movs	r0, #0
     6e6:	223c      	movs	r2, #60	; 0x3c
     6e8:	32ff      	adds	r2, #255	; 0xff
     6ea:	4910      	ldr	r1, [pc, #64]	; (72c <usart_async_write+0x5c>)
     6ec:	4b10      	ldr	r3, [pc, #64]	; (730 <usart_async_write+0x60>)
     6ee:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     6f0:	2344      	movs	r3, #68	; 0x44
     6f2:	5ae2      	ldrh	r2, [r4, r3]
     6f4:	3308      	adds	r3, #8
     6f6:	5ae3      	ldrh	r3, [r4, r3]
     6f8:	429a      	cmp	r2, r3
     6fa:	d113      	bne.n	724 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     6fc:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     6fe:	234c      	movs	r3, #76	; 0x4c
     700:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     702:	2200      	movs	r2, #0
     704:	3b08      	subs	r3, #8
     706:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     708:	3b43      	subs	r3, #67	; 0x43
     70a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     70c:	0020      	movs	r0, r4
     70e:	3008      	adds	r0, #8
     710:	4b08      	ldr	r3, [pc, #32]	; (734 <usart_async_write+0x64>)
     712:	4798      	blx	r3
	return (int32_t)length;
     714:	0028      	movs	r0, r5
}
     716:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     718:	2000      	movs	r0, #0
     71a:	e7e4      	b.n	6e6 <usart_async_write+0x16>
     71c:	2000      	movs	r0, #0
     71e:	e7e2      	b.n	6e6 <usart_async_write+0x16>
     720:	2001      	movs	r0, #1
     722:	e7e0      	b.n	6e6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     724:	201c      	movs	r0, #28
     726:	4240      	negs	r0, r0
     728:	e7f5      	b.n	716 <usart_async_write+0x46>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00001400 	.word	0x00001400
     730:	0000096d 	.word	0x0000096d
     734:	00000f8b 	.word	0x00000f8b

00000738 <usart_process_byte_sent>:
{
     738:	b570      	push	{r4, r5, r6, lr}
     73a:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     73c:	0002      	movs	r2, r0
     73e:	3a08      	subs	r2, #8
     740:	2344      	movs	r3, #68	; 0x44
     742:	5ad3      	ldrh	r3, [r2, r3]
     744:	214c      	movs	r1, #76	; 0x4c
     746:	5a52      	ldrh	r2, [r2, r1]
     748:	4293      	cmp	r3, r2
     74a:	d00d      	beq.n	768 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     74c:	0002      	movs	r2, r0
     74e:	6c01      	ldr	r1, [r0, #64]	; 0x40
     750:	3a08      	subs	r2, #8
     752:	1c5d      	adds	r5, r3, #1
     754:	2044      	movs	r0, #68	; 0x44
     756:	5215      	strh	r5, [r2, r0]
     758:	5cc9      	ldrb	r1, [r1, r3]
     75a:	0020      	movs	r0, r4
     75c:	4b04      	ldr	r3, [pc, #16]	; (770 <usart_process_byte_sent+0x38>)
     75e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     760:	0020      	movs	r0, r4
     762:	4b04      	ldr	r3, [pc, #16]	; (774 <usart_process_byte_sent+0x3c>)
     764:	4798      	blx	r3
}
     766:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     768:	4b03      	ldr	r3, [pc, #12]	; (778 <usart_process_byte_sent+0x40>)
     76a:	4798      	blx	r3
}
     76c:	e7fb      	b.n	766 <usart_process_byte_sent+0x2e>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00000f83 	.word	0x00000f83
     774:	00000f8b 	.word	0x00000f8b
     778:	00000f93 	.word	0x00000f93

0000077c <usart_async_read>:
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	b085      	sub	sp, #20
     780:	0004      	movs	r4, r0
     782:	000d      	movs	r5, r1
     784:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     786:	2800      	cmp	r0, #0
     788:	d017      	beq.n	7ba <usart_async_read+0x3e>
     78a:	2900      	cmp	r1, #0
     78c:	d017      	beq.n	7be <usart_async_read+0x42>
     78e:	2a00      	cmp	r2, #0
     790:	d117      	bne.n	7c2 <usart_async_read+0x46>
     792:	2000      	movs	r0, #0
     794:	22ac      	movs	r2, #172	; 0xac
     796:	0052      	lsls	r2, r2, #1
     798:	4912      	ldr	r1, [pc, #72]	; (7e4 <usart_async_read+0x68>)
     79a:	4b13      	ldr	r3, [pc, #76]	; (7e8 <usart_async_read+0x6c>)
     79c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     79e:	a803      	add	r0, sp, #12
     7a0:	4b12      	ldr	r3, [pc, #72]	; (7ec <usart_async_read+0x70>)
     7a2:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     7a4:	3434      	adds	r4, #52	; 0x34
     7a6:	0020      	movs	r0, r4
     7a8:	9401      	str	r4, [sp, #4]
     7aa:	4b11      	ldr	r3, [pc, #68]	; (7f0 <usart_async_read+0x74>)
     7ac:	4798      	blx	r3
     7ae:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     7b0:	a803      	add	r0, sp, #12
     7b2:	4b10      	ldr	r3, [pc, #64]	; (7f4 <usart_async_read+0x78>)
     7b4:	4798      	blx	r3
	uint16_t                       was_read = 0;
     7b6:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     7b8:	e00b      	b.n	7d2 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     7ba:	2000      	movs	r0, #0
     7bc:	e7ea      	b.n	794 <usart_async_read+0x18>
     7be:	2000      	movs	r0, #0
     7c0:	e7e8      	b.n	794 <usart_async_read+0x18>
     7c2:	2001      	movs	r0, #1
     7c4:	e7e6      	b.n	794 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     7c6:	3401      	adds	r4, #1
     7c8:	b2a4      	uxth	r4, r4
     7ca:	1869      	adds	r1, r5, r1
     7cc:	9801      	ldr	r0, [sp, #4]
     7ce:	4b0a      	ldr	r3, [pc, #40]	; (7f8 <usart_async_read+0x7c>)
     7d0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     7d2:	0021      	movs	r1, r4
     7d4:	42a7      	cmp	r7, r4
     7d6:	d901      	bls.n	7dc <usart_async_read+0x60>
     7d8:	42b4      	cmp	r4, r6
     7da:	d3f4      	bcc.n	7c6 <usart_async_read+0x4a>
}
     7dc:	0020      	movs	r0, r4
     7de:	b005      	add	sp, #20
     7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00001400 	.word	0x00001400
     7e8:	0000096d 	.word	0x0000096d
     7ec:	000003ed 	.word	0x000003ed
     7f0:	00000aad 	.word	0x00000aad
     7f4:	000003fb 	.word	0x000003fb
     7f8:	00000a21 	.word	0x00000a21

000007fc <usart_async_init>:
{
     7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7fe:	0004      	movs	r4, r0
     800:	000d      	movs	r5, r1
     802:	0016      	movs	r6, r2
     804:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     806:	2800      	cmp	r0, #0
     808:	d026      	beq.n	858 <usart_async_init+0x5c>
     80a:	2900      	cmp	r1, #0
     80c:	d026      	beq.n	85c <usart_async_init+0x60>
     80e:	2a00      	cmp	r2, #0
     810:	d026      	beq.n	860 <usart_async_init+0x64>
     812:	2b00      	cmp	r3, #0
     814:	d126      	bne.n	864 <usart_async_init+0x68>
     816:	2000      	movs	r0, #0
     818:	223a      	movs	r2, #58	; 0x3a
     81a:	4915      	ldr	r1, [pc, #84]	; (870 <usart_async_init+0x74>)
     81c:	4b15      	ldr	r3, [pc, #84]	; (874 <usart_async_init+0x78>)
     81e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     820:	0020      	movs	r0, r4
     822:	3034      	adds	r0, #52	; 0x34
     824:	003a      	movs	r2, r7
     826:	0031      	movs	r1, r6
     828:	4b13      	ldr	r3, [pc, #76]	; (878 <usart_async_init+0x7c>)
     82a:	4798      	blx	r3
     82c:	2800      	cmp	r0, #0
     82e:	d11b      	bne.n	868 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     830:	0020      	movs	r0, r4
     832:	3008      	adds	r0, #8
     834:	0029      	movs	r1, r5
     836:	4b11      	ldr	r3, [pc, #68]	; (87c <usart_async_init+0x80>)
     838:	4798      	blx	r3
	if (init_status) {
     83a:	2800      	cmp	r0, #0
     83c:	d10b      	bne.n	856 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     83e:	4b10      	ldr	r3, [pc, #64]	; (880 <usart_async_init+0x84>)
     840:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     842:	4b10      	ldr	r3, [pc, #64]	; (884 <usart_async_init+0x88>)
     844:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     846:	4b10      	ldr	r3, [pc, #64]	; (888 <usart_async_init+0x8c>)
     848:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     84a:	4b10      	ldr	r3, [pc, #64]	; (88c <usart_async_init+0x90>)
     84c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     84e:	4b10      	ldr	r3, [pc, #64]	; (890 <usart_async_init+0x94>)
     850:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     852:	4b10      	ldr	r3, [pc, #64]	; (894 <usart_async_init+0x98>)
     854:	6163      	str	r3, [r4, #20]
}
     856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     858:	2000      	movs	r0, #0
     85a:	e7dd      	b.n	818 <usart_async_init+0x1c>
     85c:	2000      	movs	r0, #0
     85e:	e7db      	b.n	818 <usart_async_init+0x1c>
     860:	2000      	movs	r0, #0
     862:	e7d9      	b.n	818 <usart_async_init+0x1c>
     864:	2001      	movs	r0, #1
     866:	e7d7      	b.n	818 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     868:	200d      	movs	r0, #13
     86a:	4240      	negs	r0, r0
     86c:	e7f3      	b.n	856 <usart_async_init+0x5a>
     86e:	46c0      	nop			; (mov r8, r8)
     870:	00001400 	.word	0x00001400
     874:	0000096d 	.word	0x0000096d
     878:	000009d5 	.word	0x000009d5
     87c:	00000ee5 	.word	0x00000ee5
     880:	0000077d 	.word	0x0000077d
     884:	000006d1 	.word	0x000006d1
     888:	00000739 	.word	0x00000739
     88c:	000006b5 	.word	0x000006b5
     890:	00000691 	.word	0x00000691
     894:	000006a3 	.word	0x000006a3

00000898 <usart_async_enable>:
{
     898:	b510      	push	{r4, lr}
     89a:	0004      	movs	r4, r0
	ASSERT(descr);
     89c:	1e43      	subs	r3, r0, #1
     89e:	4198      	sbcs	r0, r3
     8a0:	b2c0      	uxtb	r0, r0
     8a2:	2261      	movs	r2, #97	; 0x61
     8a4:	4904      	ldr	r1, [pc, #16]	; (8b8 <usart_async_enable+0x20>)
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <usart_async_enable+0x24>)
     8a8:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     8aa:	0020      	movs	r0, r4
     8ac:	3008      	adds	r0, #8
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <usart_async_enable+0x28>)
     8b0:	4798      	blx	r3
}
     8b2:	2000      	movs	r0, #0
     8b4:	bd10      	pop	{r4, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00001400 	.word	0x00001400
     8bc:	0000096d 	.word	0x0000096d
     8c0:	00000f71 	.word	0x00000f71

000008c4 <usart_async_get_io_descriptor>:
{
     8c4:	b570      	push	{r4, r5, r6, lr}
     8c6:	0004      	movs	r4, r0
     8c8:	000d      	movs	r5, r1
	ASSERT(descr && io);
     8ca:	2800      	cmp	r0, #0
     8cc:	d00b      	beq.n	8e6 <usart_async_get_io_descriptor+0x22>
     8ce:	2900      	cmp	r1, #0
     8d0:	d007      	beq.n	8e2 <usart_async_get_io_descriptor+0x1e>
     8d2:	2001      	movs	r0, #1
     8d4:	2277      	movs	r2, #119	; 0x77
     8d6:	4905      	ldr	r1, [pc, #20]	; (8ec <usart_async_get_io_descriptor+0x28>)
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <usart_async_get_io_descriptor+0x2c>)
     8da:	4798      	blx	r3
	*io = &descr->io;
     8dc:	602c      	str	r4, [r5, #0]
}
     8de:	2000      	movs	r0, #0
     8e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     8e2:	2000      	movs	r0, #0
     8e4:	e7f6      	b.n	8d4 <usart_async_get_io_descriptor+0x10>
     8e6:	2000      	movs	r0, #0
     8e8:	e7f4      	b.n	8d4 <usart_async_get_io_descriptor+0x10>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	00001400 	.word	0x00001400
     8f0:	0000096d 	.word	0x0000096d

000008f4 <usart_async_register_callback>:
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0005      	movs	r5, r0
     8f8:	000e      	movs	r6, r1
     8fa:	0014      	movs	r4, r2
	ASSERT(descr);
     8fc:	1e43      	subs	r3, r0, #1
     8fe:	4198      	sbcs	r0, r3
     900:	b2c0      	uxtb	r0, r0
     902:	2283      	movs	r2, #131	; 0x83
     904:	4916      	ldr	r1, [pc, #88]	; (960 <usart_async_register_callback+0x6c>)
     906:	4b17      	ldr	r3, [pc, #92]	; (964 <usart_async_register_callback+0x70>)
     908:	4798      	blx	r3
	switch (type) {
     90a:	2e01      	cmp	r6, #1
     90c:	d011      	beq.n	932 <usart_async_register_callback+0x3e>
     90e:	2e00      	cmp	r6, #0
     910:	d004      	beq.n	91c <usart_async_register_callback+0x28>
     912:	2e02      	cmp	r6, #2
     914:	d018      	beq.n	948 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     916:	200d      	movs	r0, #13
     918:	4240      	negs	r0, r0
     91a:	e009      	b.n	930 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     91c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     91e:	1e62      	subs	r2, r4, #1
     920:	4194      	sbcs	r4, r2
     922:	b2e2      	uxtb	r2, r4
     924:	0028      	movs	r0, r5
     926:	3008      	adds	r0, #8
     928:	2101      	movs	r1, #1
     92a:	4b0f      	ldr	r3, [pc, #60]	; (968 <usart_async_register_callback+0x74>)
     92c:	4798      	blx	r3
	return ERR_NONE;
     92e:	2000      	movs	r0, #0
}
     930:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     932:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     934:	1e62      	subs	r2, r4, #1
     936:	4194      	sbcs	r4, r2
     938:	b2e2      	uxtb	r2, r4
     93a:	0028      	movs	r0, r5
     93c:	3008      	adds	r0, #8
     93e:	2102      	movs	r1, #2
     940:	4b09      	ldr	r3, [pc, #36]	; (968 <usart_async_register_callback+0x74>)
     942:	4798      	blx	r3
	return ERR_NONE;
     944:	2000      	movs	r0, #0
		break;
     946:	e7f3      	b.n	930 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     948:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     94a:	1e62      	subs	r2, r4, #1
     94c:	4194      	sbcs	r4, r2
     94e:	b2e2      	uxtb	r2, r4
     950:	0028      	movs	r0, r5
     952:	3008      	adds	r0, #8
     954:	2103      	movs	r1, #3
     956:	4b04      	ldr	r3, [pc, #16]	; (968 <usart_async_register_callback+0x74>)
     958:	4798      	blx	r3
	return ERR_NONE;
     95a:	2000      	movs	r0, #0
		break;
     95c:	e7e8      	b.n	930 <usart_async_register_callback+0x3c>
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00001400 	.word	0x00001400
     964:	0000096d 	.word	0x0000096d
     968:	00000f9d 	.word	0x00000f9d

0000096c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     96c:	2800      	cmp	r0, #0
     96e:	d100      	bne.n	972 <assert+0x6>
		__asm("BKPT #0");
     970:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     972:	4770      	bx	lr

00000974 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     974:	6803      	ldr	r3, [r0, #0]
     976:	2b00      	cmp	r3, #0
     978:	d003      	beq.n	982 <is_list_element+0xe>
		if (it == element) {
     97a:	428b      	cmp	r3, r1
     97c:	d003      	beq.n	986 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     97e:	681b      	ldr	r3, [r3, #0]
     980:	e7f9      	b.n	976 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     982:	2000      	movs	r0, #0
}
     984:	4770      	bx	lr
			return true;
     986:	2001      	movs	r0, #1
     988:	e7fc      	b.n	984 <is_list_element+0x10>
	...

0000098c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     98c:	b570      	push	{r4, r5, r6, lr}
     98e:	0004      	movs	r4, r0
     990:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     992:	4b06      	ldr	r3, [pc, #24]	; (9ac <list_insert_as_head+0x20>)
     994:	4798      	blx	r3
     996:	2301      	movs	r3, #1
     998:	4058      	eors	r0, r3
     99a:	b2c0      	uxtb	r0, r0
     99c:	2239      	movs	r2, #57	; 0x39
     99e:	4904      	ldr	r1, [pc, #16]	; (9b0 <list_insert_as_head+0x24>)
     9a0:	4b04      	ldr	r3, [pc, #16]	; (9b4 <list_insert_as_head+0x28>)
     9a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     9a4:	6823      	ldr	r3, [r4, #0]
     9a6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     9a8:	6025      	str	r5, [r4, #0]
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}
     9ac:	00000975 	.word	0x00000975
     9b0:	00001420 	.word	0x00001420
     9b4:	0000096d 	.word	0x0000096d

000009b8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     9b8:	6803      	ldr	r3, [r0, #0]
     9ba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     9bc:	6001      	str	r1, [r0, #0]
}
     9be:	4770      	bx	lr

000009c0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     9c0:	6803      	ldr	r3, [r0, #0]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d003      	beq.n	9ce <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     9c6:	681a      	ldr	r2, [r3, #0]
     9c8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     9ca:	0018      	movs	r0, r3
	}

	return NULL;
}
     9cc:	4770      	bx	lr
	return NULL;
     9ce:	2000      	movs	r0, #0
     9d0:	e7fc      	b.n	9cc <list_remove_head+0xc>
	...

000009d4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	0004      	movs	r4, r0
     9d8:	000e      	movs	r6, r1
     9da:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     9dc:	2800      	cmp	r0, #0
     9de:	d012      	beq.n	a06 <ringbuffer_init+0x32>
     9e0:	2900      	cmp	r1, #0
     9e2:	d012      	beq.n	a0a <ringbuffer_init+0x36>
     9e4:	2a00      	cmp	r2, #0
     9e6:	d112      	bne.n	a0e <ringbuffer_init+0x3a>
     9e8:	2000      	movs	r0, #0
     9ea:	2228      	movs	r2, #40	; 0x28
     9ec:	490a      	ldr	r1, [pc, #40]	; (a18 <ringbuffer_init+0x44>)
     9ee:	4b0b      	ldr	r3, [pc, #44]	; (a1c <ringbuffer_init+0x48>)
     9f0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     9f2:	1e6b      	subs	r3, r5, #1
     9f4:	422b      	tst	r3, r5
     9f6:	d10c      	bne.n	a12 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     9f8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     9fe:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     a00:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     a02:	2000      	movs	r0, #0
}
     a04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     a06:	2000      	movs	r0, #0
     a08:	e7ef      	b.n	9ea <ringbuffer_init+0x16>
     a0a:	2000      	movs	r0, #0
     a0c:	e7ed      	b.n	9ea <ringbuffer_init+0x16>
     a0e:	2001      	movs	r0, #1
     a10:	e7eb      	b.n	9ea <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     a12:	200d      	movs	r0, #13
     a14:	4240      	negs	r0, r0
     a16:	e7f5      	b.n	a04 <ringbuffer_init+0x30>
     a18:	00001440 	.word	0x00001440
     a1c:	0000096d 	.word	0x0000096d

00000a20 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     a20:	b570      	push	{r4, r5, r6, lr}
     a22:	0004      	movs	r4, r0
     a24:	000d      	movs	r5, r1
	ASSERT(rb && data);
     a26:	2800      	cmp	r0, #0
     a28:	d016      	beq.n	a58 <ringbuffer_get+0x38>
     a2a:	2900      	cmp	r1, #0
     a2c:	d012      	beq.n	a54 <ringbuffer_get+0x34>
     a2e:	2001      	movs	r0, #1
     a30:	2240      	movs	r2, #64	; 0x40
     a32:	490c      	ldr	r1, [pc, #48]	; (a64 <ringbuffer_get+0x44>)
     a34:	4b0c      	ldr	r3, [pc, #48]	; (a68 <ringbuffer_get+0x48>)
     a36:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     a38:	68a3      	ldr	r3, [r4, #8]
     a3a:	68e2      	ldr	r2, [r4, #12]
     a3c:	429a      	cmp	r2, r3
     a3e:	d00d      	beq.n	a5c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     a40:	6862      	ldr	r2, [r4, #4]
     a42:	4013      	ands	r3, r2
     a44:	6822      	ldr	r2, [r4, #0]
     a46:	5cd3      	ldrb	r3, [r2, r3]
     a48:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     a4a:	68a3      	ldr	r3, [r4, #8]
     a4c:	3301      	adds	r3, #1
     a4e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     a50:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     a52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     a54:	2000      	movs	r0, #0
     a56:	e7eb      	b.n	a30 <ringbuffer_get+0x10>
     a58:	2000      	movs	r0, #0
     a5a:	e7e9      	b.n	a30 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     a5c:	200a      	movs	r0, #10
     a5e:	4240      	negs	r0, r0
     a60:	e7f7      	b.n	a52 <ringbuffer_get+0x32>
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	00001440 	.word	0x00001440
     a68:	0000096d 	.word	0x0000096d

00000a6c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     a6c:	b570      	push	{r4, r5, r6, lr}
     a6e:	0004      	movs	r4, r0
     a70:	000d      	movs	r5, r1
	ASSERT(rb);
     a72:	1e43      	subs	r3, r0, #1
     a74:	4198      	sbcs	r0, r3
     a76:	b2c0      	uxtb	r0, r0
     a78:	2251      	movs	r2, #81	; 0x51
     a7a:	490a      	ldr	r1, [pc, #40]	; (aa4 <ringbuffer_put+0x38>)
     a7c:	4b0a      	ldr	r3, [pc, #40]	; (aa8 <ringbuffer_put+0x3c>)
     a7e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     a80:	6863      	ldr	r3, [r4, #4]
     a82:	68e2      	ldr	r2, [r4, #12]
     a84:	4013      	ands	r3, r2
     a86:	6822      	ldr	r2, [r4, #0]
     a88:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     a8a:	68e3      	ldr	r3, [r4, #12]
     a8c:	68a2      	ldr	r2, [r4, #8]
     a8e:	1a9a      	subs	r2, r3, r2
     a90:	6861      	ldr	r1, [r4, #4]
     a92:	428a      	cmp	r2, r1
     a94:	d901      	bls.n	a9a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     a96:	1a59      	subs	r1, r3, r1
     a98:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     a9a:	3301      	adds	r3, #1
     a9c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     a9e:	2000      	movs	r0, #0
     aa0:	bd70      	pop	{r4, r5, r6, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	00001440 	.word	0x00001440
     aa8:	0000096d 	.word	0x0000096d

00000aac <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     aac:	b510      	push	{r4, lr}
     aae:	0004      	movs	r4, r0
	ASSERT(rb);
     ab0:	1e43      	subs	r3, r0, #1
     ab2:	4198      	sbcs	r0, r3
     ab4:	b2c0      	uxtb	r0, r0
     ab6:	2267      	movs	r2, #103	; 0x67
     ab8:	4903      	ldr	r1, [pc, #12]	; (ac8 <ringbuffer_num+0x1c>)
     aba:	4b04      	ldr	r3, [pc, #16]	; (acc <ringbuffer_num+0x20>)
     abc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     abe:	68e0      	ldr	r0, [r4, #12]
     ac0:	68a3      	ldr	r3, [r4, #8]
     ac2:	1ac0      	subs	r0, r0, r3
}
     ac4:	bd10      	pop	{r4, pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00001440 	.word	0x00001440
     acc:	0000096d 	.word	0x0000096d

00000ad0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     ad0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     ad2:	4b06      	ldr	r3, [pc, #24]	; (aec <_init_chip+0x1c>)
     ad4:	685a      	ldr	r2, [r3, #4]
     ad6:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <_init_chip+0x20>)
     ada:	4798      	blx	r3
	_sysctrl_init_sources();
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <_init_chip+0x24>)
     ade:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     ae0:	4b05      	ldr	r3, [pc, #20]	; (af8 <_init_chip+0x28>)
     ae2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     ae4:	20ff      	movs	r0, #255	; 0xff
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <_init_chip+0x2c>)
     ae8:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     aea:	bd10      	pop	{r4, pc}
     aec:	41004000 	.word	0x41004000
     af0:	00000be9 	.word	0x00000be9
     af4:	0000103d 	.word	0x0000103d
     af8:	00001089 	.word	0x00001089
     afc:	00000b01 	.word	0x00000b01

00000b00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b00:	07c3      	lsls	r3, r0, #31
     b02:	d50a      	bpl.n	b1a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b04:	4b11      	ldr	r3, [pc, #68]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b06:	2280      	movs	r2, #128	; 0x80
     b08:	0052      	lsls	r2, r2, #1
     b0a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b0c:	2283      	movs	r2, #131	; 0x83
     b0e:	0252      	lsls	r2, r2, #9
     b10:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b12:	4b0e      	ldr	r3, [pc, #56]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b14:	785b      	ldrb	r3, [r3, #1]
     b16:	09db      	lsrs	r3, r3, #7
     b18:	d1fb      	bne.n	b12 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     b1a:	0743      	lsls	r3, r0, #29
     b1c:	d509      	bpl.n	b32 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
     b1e:	4b0b      	ldr	r3, [pc, #44]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b20:	2281      	movs	r2, #129	; 0x81
     b22:	0052      	lsls	r2, r2, #1
     b24:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b26:	4a0a      	ldr	r2, [pc, #40]	; (b50 <_gclk_init_generators_by_fref+0x50>)
     b28:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b2a:	4b08      	ldr	r3, [pc, #32]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b2c:	785b      	ldrb	r3, [r3, #1]
     b2e:	09db      	lsrs	r3, r3, #7
     b30:	d1fb      	bne.n	b2a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     b32:	0703      	lsls	r3, r0, #28
     b34:	d509      	bpl.n	b4a <_gclk_init_generators_by_fref+0x4a>
	((Gclk *)hw)->GENDIV.reg = data;
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b38:	2204      	movs	r2, #4
     b3a:	32ff      	adds	r2, #255	; 0xff
     b3c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b3e:	4a05      	ldr	r2, [pc, #20]	; (b54 <_gclk_init_generators_by_fref+0x54>)
     b40:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <_gclk_init_generators_by_fref+0x4c>)
     b44:	785b      	ldrb	r3, [r3, #1]
     b46:	09db      	lsrs	r3, r3, #7
     b48:	d1fb      	bne.n	b42 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     b4a:	4770      	bx	lr
     b4c:	40000c00 	.word	0x40000c00
     b50:	00010602 	.word	0x00010602
     b54:	00010603 	.word	0x00010603

00000b58 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	0005      	movs	r5, r0
     b5c:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     b5e:	2800      	cmp	r0, #0
     b60:	d01c      	beq.n	b9c <_flash_init+0x44>
     b62:	4b10      	ldr	r3, [pc, #64]	; (ba4 <_flash_init+0x4c>)
     b64:	4299      	cmp	r1, r3
     b66:	d01b      	beq.n	ba0 <_flash_init+0x48>
     b68:	2000      	movs	r0, #0
     b6a:	2246      	movs	r2, #70	; 0x46
     b6c:	490e      	ldr	r1, [pc, #56]	; (ba8 <_flash_init+0x50>)
     b6e:	4b0f      	ldr	r3, [pc, #60]	; (bac <_flash_init+0x54>)
     b70:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
     b72:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
     b74:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
     b76:	239e      	movs	r3, #158	; 0x9e
     b78:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
     b7a:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
     b7c:	4b0c      	ldr	r3, [pc, #48]	; (bb0 <_flash_init+0x58>)
     b7e:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b80:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <_flash_init+0x5c>)
     b82:	2220      	movs	r2, #32
     b84:	2180      	movs	r1, #128	; 0x80
     b86:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     b88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b8c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b90:	3101      	adds	r1, #1
     b92:	31ff      	adds	r1, #255	; 0xff
     b94:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b96:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
     b98:	2000      	movs	r0, #0
     b9a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
     b9c:	2000      	movs	r0, #0
     b9e:	e7e4      	b.n	b6a <_flash_init+0x12>
     ba0:	2001      	movs	r0, #1
     ba2:	e7e2      	b.n	b6a <_flash_init+0x12>
     ba4:	41004000 	.word	0x41004000
     ba8:	00001464 	.word	0x00001464
     bac:	0000096d 	.word	0x0000096d
     bb0:	20000468 	.word	0x20000468
     bb4:	e000e100 	.word	0xe000e100

00000bb8 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
     bb8:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
     bba:	4b0a      	ldr	r3, [pc, #40]	; (be4 <NVMCTRL_Handler+0x2c>)
     bbc:	6818      	ldr	r0, [r3, #0]
     bbe:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
     bc0:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
     bc2:	07d2      	lsls	r2, r2, #31
     bc4:	d504      	bpl.n	bd0 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
     bc6:	6803      	ldr	r3, [r0, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d000      	beq.n	bce <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
     bcc:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
     bce:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
     bd0:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
     bd2:	0792      	lsls	r2, r2, #30
     bd4:	d5fb      	bpl.n	bce <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
     bd6:	2202      	movs	r2, #2
     bd8:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
     bda:	6843      	ldr	r3, [r0, #4]
     bdc:	2b00      	cmp	r3, #0
     bde:	d0f6      	beq.n	bce <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
     be0:	4798      	blx	r3
}
     be2:	e7f4      	b.n	bce <NVMCTRL_Handler+0x16>
     be4:	20000468 	.word	0x20000468

00000be8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     be8:	4b06      	ldr	r3, [pc, #24]	; (c04 <_pm_init+0x1c>)
     bea:	7a1a      	ldrb	r2, [r3, #8]
     bec:	b2d2      	uxtb	r2, r2
     bee:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     bf0:	7a5a      	ldrb	r2, [r3, #9]
     bf2:	b2d2      	uxtb	r2, r2
     bf4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     bf6:	7a9a      	ldrb	r2, [r3, #10]
     bf8:	b2d2      	uxtb	r2, r2
     bfa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     bfc:	7ada      	ldrb	r2, [r3, #11]
     bfe:	b2d2      	uxtb	r2, r2
     c00:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c02:	4770      	bx	lr
     c04:	40000400 	.word	0x40000400

00000c08 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     c08:	b510      	push	{r4, lr}
     c0a:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     c0c:	68c3      	ldr	r3, [r0, #12]
     c0e:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     c10:	07db      	lsls	r3, r3, #31
     c12:	d506      	bpl.n	c22 <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     c14:	6803      	ldr	r3, [r0, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d000      	beq.n	c1c <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     c1a:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     c1c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     c1e:	2201      	movs	r2, #1
     c20:	721a      	strb	r2, [r3, #8]
	}
}
     c22:	bd10      	pop	{r4, pc}

00000c24 <_timer_init>:
{
     c24:	b570      	push	{r4, r5, r6, lr}
     c26:	0004      	movs	r4, r0
     c28:	000d      	movs	r5, r1
	ASSERT(dev);
     c2a:	1e43      	subs	r3, r0, #1
     c2c:	4198      	sbcs	r0, r3
     c2e:	b2c0      	uxtb	r0, r0
     c30:	2233      	movs	r2, #51	; 0x33
     c32:	4910      	ldr	r1, [pc, #64]	; (c74 <_timer_init+0x50>)
     c34:	4b10      	ldr	r3, [pc, #64]	; (c78 <_timer_init+0x54>)
     c36:	4798      	blx	r3
	dev->hw = hw;
     c38:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     c3a:	2301      	movs	r3, #1
     c3c:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     c3e:	7aab      	ldrb	r3, [r5, #10]
     c40:	09db      	lsrs	r3, r3, #7
     c42:	d1fc      	bne.n	c3e <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     c44:	68e2      	ldr	r2, [r4, #12]
     c46:	7a93      	ldrb	r3, [r2, #10]
     c48:	09db      	lsrs	r3, r3, #7
     c4a:	d1fc      	bne.n	c46 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     c4c:	3380      	adds	r3, #128	; 0x80
     c4e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     c50:	7a93      	ldrb	r3, [r2, #10]
     c52:	09db      	lsrs	r3, r3, #7
     c54:	d1fc      	bne.n	c50 <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     c56:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     c58:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	00db      	lsls	r3, r3, #3
     c5e:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     c60:	7a93      	ldrb	r3, [r2, #10]
     c62:	09db      	lsrs	r3, r3, #7
     c64:	d1fc      	bne.n	c60 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     c66:	3301      	adds	r3, #1
     c68:	68e2      	ldr	r2, [r4, #12]
     c6a:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     c6c:	4b03      	ldr	r3, [pc, #12]	; (c7c <_timer_init+0x58>)
     c6e:	601c      	str	r4, [r3, #0]
}
     c70:	2000      	movs	r0, #0
     c72:	bd70      	pop	{r4, r5, r6, pc}
     c74:	00001484 	.word	0x00001484
     c78:	0000096d 	.word	0x0000096d
     c7c:	2000046c 	.word	0x2000046c

00000c80 <_timer_start>:
{
     c80:	b510      	push	{r4, lr}
     c82:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     c84:	d020      	beq.n	cc8 <_timer_start+0x48>
     c86:	68c3      	ldr	r3, [r0, #12]
     c88:	2b00      	cmp	r3, #0
     c8a:	d01b      	beq.n	cc4 <_timer_start+0x44>
     c8c:	2001      	movs	r0, #1
     c8e:	226a      	movs	r2, #106	; 0x6a
     c90:	490e      	ldr	r1, [pc, #56]	; (ccc <_timer_start+0x4c>)
     c92:	4b0f      	ldr	r3, [pc, #60]	; (cd0 <_timer_start+0x50>)
     c94:	4798      	blx	r3
     c96:	2208      	movs	r2, #8
     c98:	4b0e      	ldr	r3, [pc, #56]	; (cd4 <_timer_start+0x54>)
     c9a:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     c9c:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     c9e:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     ca0:	2300      	movs	r3, #0
     ca2:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ca4:	7a93      	ldrb	r3, [r2, #10]
     ca6:	09db      	lsrs	r3, r3, #7
     ca8:	d1fc      	bne.n	ca4 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     caa:	68e2      	ldr	r2, [r4, #12]
     cac:	7a93      	ldrb	r3, [r2, #10]
     cae:	09db      	lsrs	r3, r3, #7
     cb0:	d1fc      	bne.n	cac <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     cb2:	8813      	ldrh	r3, [r2, #0]
     cb4:	2102      	movs	r1, #2
     cb6:	430b      	orrs	r3, r1
     cb8:	b29b      	uxth	r3, r3
     cba:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cbc:	7a93      	ldrb	r3, [r2, #10]
     cbe:	09db      	lsrs	r3, r3, #7
     cc0:	d1fc      	bne.n	cbc <_timer_start+0x3c>
}
     cc2:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     cc4:	2000      	movs	r0, #0
     cc6:	e7e2      	b.n	c8e <_timer_start+0xe>
     cc8:	2000      	movs	r0, #0
     cca:	e7e0      	b.n	c8e <_timer_start+0xe>
     ccc:	00001484 	.word	0x00001484
     cd0:	0000096d 	.word	0x0000096d
     cd4:	e000e100 	.word	0xe000e100

00000cd8 <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     cd8:	68c2      	ldr	r2, [r0, #12]
     cda:	7a93      	ldrb	r3, [r2, #10]
     cdc:	09db      	lsrs	r3, r3, #7
     cde:	d1fc      	bne.n	cda <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     ce0:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     ce2:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     ce4:	2001      	movs	r0, #1
     ce6:	4018      	ands	r0, r3
}
     ce8:	4770      	bx	lr

00000cea <_timer_set_irq>:
}
     cea:	4770      	bx	lr

00000cec <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     cec:	2000      	movs	r0, #0
     cee:	4770      	bx	lr

00000cf0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     cf0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     cf2:	4b02      	ldr	r3, [pc, #8]	; (cfc <RTC_Handler+0xc>)
     cf4:	6818      	ldr	r0, [r3, #0]
     cf6:	4b02      	ldr	r3, [pc, #8]	; (d00 <RTC_Handler+0x10>)
     cf8:	4798      	blx	r3
}
     cfa:	bd10      	pop	{r4, pc}
     cfc:	2000046c 	.word	0x2000046c
     d00:	00000c09 	.word	0x00000c09

00000d04 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     d04:	4b02      	ldr	r3, [pc, #8]	; (d10 <_sercom_get_hardware_index+0xc>)
     d06:	469c      	mov	ip, r3
     d08:	4460      	add	r0, ip
     d0a:	0a80      	lsrs	r0, r0, #10
     d0c:	b2c0      	uxtb	r0, r0
}
     d0e:	4770      	bx	lr
     d10:	bdfff800 	.word	0xbdfff800

00000d14 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     d14:	b510      	push	{r4, lr}
	void *hw = device->hw;
     d16:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d18:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     d1a:	07db      	lsls	r3, r3, #31
     d1c:	d502      	bpl.n	d24 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     d1e:	7da3      	ldrb	r3, [r4, #22]
     d20:	07db      	lsls	r3, r3, #31
     d22:	d40f      	bmi.n	d44 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     d24:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     d26:	079b      	lsls	r3, r3, #30
     d28:	d502      	bpl.n	d30 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     d2a:	7da3      	ldrb	r3, [r4, #22]
     d2c:	079b      	lsls	r3, r3, #30
     d2e:	d40e      	bmi.n	d4e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d30:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     d32:	075b      	lsls	r3, r3, #29
     d34:	d515      	bpl.n	d62 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     d36:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     d38:	2337      	movs	r3, #55	; 0x37
     d3a:	421a      	tst	r2, r3
     d3c:	d00c      	beq.n	d58 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     d3e:	3308      	adds	r3, #8
     d40:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     d42:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     d44:	2301      	movs	r3, #1
     d46:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     d48:	6803      	ldr	r3, [r0, #0]
     d4a:	4798      	blx	r3
     d4c:	e7f9      	b.n	d42 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     d4e:	2302      	movs	r3, #2
     d50:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     d52:	6883      	ldr	r3, [r0, #8]
     d54:	4798      	blx	r3
     d56:	e7f4      	b.n	d42 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     d58:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     d5a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     d5c:	b2c9      	uxtb	r1, r1
     d5e:	4798      	blx	r3
     d60:	e7ef      	b.n	d42 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     d62:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     d64:	09db      	lsrs	r3, r3, #7
     d66:	d0ec      	beq.n	d42 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     d68:	2380      	movs	r3, #128	; 0x80
     d6a:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     d6c:	68c3      	ldr	r3, [r0, #12]
     d6e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     d70:	8b63      	ldrh	r3, [r4, #26]
     d72:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     d74:	8363      	strh	r3, [r4, #26]
     d76:	e7e4      	b.n	d42 <_sercom_usart_interrupt_handler+0x2e>

00000d78 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
     d78:	4b06      	ldr	r3, [pc, #24]	; (d94 <_sercom_init_irq_param+0x1c>)
     d7a:	4298      	cmp	r0, r3
     d7c:	d003      	beq.n	d86 <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
     d7e:	4b06      	ldr	r3, [pc, #24]	; (d98 <_sercom_init_irq_param+0x20>)
     d80:	4298      	cmp	r0, r3
     d82:	d003      	beq.n	d8c <_sercom_init_irq_param+0x14>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
     d84:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
     d86:	4b05      	ldr	r3, [pc, #20]	; (d9c <_sercom_init_irq_param+0x24>)
     d88:	6019      	str	r1, [r3, #0]
     d8a:	e7f8      	b.n	d7e <_sercom_init_irq_param+0x6>
		_sercom3_dev = (struct _usart_async_device *)dev;
     d8c:	4b03      	ldr	r3, [pc, #12]	; (d9c <_sercom_init_irq_param+0x24>)
     d8e:	6059      	str	r1, [r3, #4]
}
     d90:	e7f8      	b.n	d84 <_sercom_init_irq_param+0xc>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	42000800 	.word	0x42000800
     d98:	42001400 	.word	0x42001400
     d9c:	20000470 	.word	0x20000470

00000da0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     da0:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <_sercom_get_irq_num+0xc>)
     da4:	4798      	blx	r3
     da6:	3009      	adds	r0, #9
     da8:	b2c0      	uxtb	r0, r0
}
     daa:	bd10      	pop	{r4, pc}
     dac:	00000d05 	.word	0x00000d05

00000db0 <_get_sercom_index>:
{
     db0:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     db2:	4b0c      	ldr	r3, [pc, #48]	; (de4 <_get_sercom_index+0x34>)
     db4:	4798      	blx	r3
     db6:	0001      	movs	r1, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     db8:	2000      	movs	r0, #0
     dba:	2801      	cmp	r0, #1
     dbc:	d809      	bhi.n	dd2 <_get_sercom_index+0x22>
		if (_usarts[i].number == sercom_offset) {
     dbe:	0083      	lsls	r3, r0, #2
     dc0:	181b      	adds	r3, r3, r0
     dc2:	009a      	lsls	r2, r3, #2
     dc4:	4b08      	ldr	r3, [pc, #32]	; (de8 <_get_sercom_index+0x38>)
     dc6:	5cd3      	ldrb	r3, [r2, r3]
     dc8:	4299      	cmp	r1, r3
     dca:	d009      	beq.n	de0 <_get_sercom_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     dcc:	3001      	adds	r0, #1
     dce:	b2c0      	uxtb	r0, r0
     dd0:	e7f3      	b.n	dba <_get_sercom_index+0xa>
	ASSERT(false);
     dd2:	2298      	movs	r2, #152	; 0x98
     dd4:	0092      	lsls	r2, r2, #2
     dd6:	4905      	ldr	r1, [pc, #20]	; (dec <_get_sercom_index+0x3c>)
     dd8:	2000      	movs	r0, #0
     dda:	4b05      	ldr	r3, [pc, #20]	; (df0 <_get_sercom_index+0x40>)
     ddc:	4798      	blx	r3
	return 0;
     dde:	2000      	movs	r0, #0
}
     de0:	bd10      	pop	{r4, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00000d05 	.word	0x00000d05
     de8:	0000149c 	.word	0x0000149c
     dec:	00001500 	.word	0x00001500
     df0:	0000096d 	.word	0x0000096d

00000df4 <_usart_init>:
{
     df4:	b570      	push	{r4, r5, r6, lr}
     df6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     df8:	4b38      	ldr	r3, [pc, #224]	; (edc <_usart_init+0xe8>)
     dfa:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     dfc:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     dfe:	07db      	lsls	r3, r3, #31
     e00:	d41d      	bmi.n	e3e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     e02:	0083      	lsls	r3, r0, #2
     e04:	181b      	adds	r3, r3, r0
     e06:	009a      	lsls	r2, r3, #2
     e08:	4b35      	ldr	r3, [pc, #212]	; (ee0 <_usart_init+0xec>)
     e0a:	189b      	adds	r3, r3, r2
     e0c:	685a      	ldr	r2, [r3, #4]
     e0e:	231c      	movs	r3, #28
     e10:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e12:	69e3      	ldr	r3, [r4, #28]
     e14:	079b      	lsls	r3, r3, #30
     e16:	d1fc      	bne.n	e12 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e18:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e1a:	079b      	lsls	r3, r3, #30
     e1c:	d509      	bpl.n	e32 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e1e:	6823      	ldr	r3, [r4, #0]
     e20:	2102      	movs	r1, #2
     e22:	438b      	bics	r3, r1
     e24:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e26:	69e3      	ldr	r3, [r4, #28]
     e28:	079b      	lsls	r3, r3, #30
     e2a:	d1fc      	bne.n	e26 <_usart_init+0x32>
     e2c:	69e3      	ldr	r3, [r4, #28]
     e2e:	079b      	lsls	r3, r3, #30
     e30:	d4fc      	bmi.n	e2c <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     e32:	2301      	movs	r3, #1
     e34:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e36:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e38:	69e3      	ldr	r3, [r4, #28]
     e3a:	079b      	lsls	r3, r3, #30
     e3c:	d1fc      	bne.n	e38 <_usart_init+0x44>
     e3e:	69e3      	ldr	r3, [r4, #28]
     e40:	07db      	lsls	r3, r3, #31
     e42:	d4fc      	bmi.n	e3e <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     e44:	0083      	lsls	r3, r0, #2
     e46:	181b      	adds	r3, r3, r0
     e48:	009a      	lsls	r2, r3, #2
     e4a:	4b25      	ldr	r3, [pc, #148]	; (ee0 <_usart_init+0xec>)
     e4c:	189b      	adds	r3, r3, r2
     e4e:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e50:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e52:	69e3      	ldr	r3, [r4, #28]
     e54:	079b      	lsls	r3, r3, #30
     e56:	d1fc      	bne.n	e52 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     e58:	0083      	lsls	r3, r0, #2
     e5a:	181b      	adds	r3, r3, r0
     e5c:	009a      	lsls	r2, r3, #2
     e5e:	4b20      	ldr	r3, [pc, #128]	; (ee0 <_usart_init+0xec>)
     e60:	189b      	adds	r3, r3, r2
     e62:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e64:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e66:	69e3      	ldr	r3, [r4, #28]
     e68:	075b      	lsls	r3, r3, #29
     e6a:	d1fc      	bne.n	e66 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     e6c:	0083      	lsls	r3, r0, #2
     e6e:	181b      	adds	r3, r3, r0
     e70:	009a      	lsls	r2, r3, #2
     e72:	4b1b      	ldr	r3, [pc, #108]	; (ee0 <_usart_init+0xec>)
     e74:	189b      	adds	r3, r3, r2
     e76:	685b      	ldr	r3, [r3, #4]
     e78:	049a      	lsls	r2, r3, #18
     e7a:	d40b      	bmi.n	e94 <_usart_init+0xa0>
     e7c:	22c0      	movs	r2, #192	; 0xc0
     e7e:	01d2      	lsls	r2, r2, #7
     e80:	4213      	tst	r3, r2
     e82:	d107      	bne.n	e94 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     e84:	0083      	lsls	r3, r0, #2
     e86:	181b      	adds	r3, r3, r0
     e88:	009a      	lsls	r2, r3, #2
     e8a:	4b15      	ldr	r3, [pc, #84]	; (ee0 <_usart_init+0xec>)
     e8c:	189b      	adds	r3, r3, r2
     e8e:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
     e90:	81a3      	strh	r3, [r4, #12]
     e92:	e015      	b.n	ec0 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     e94:	0083      	lsls	r3, r0, #2
     e96:	181b      	adds	r3, r3, r0
     e98:	009a      	lsls	r2, r3, #2
     e9a:	4911      	ldr	r1, [pc, #68]	; (ee0 <_usart_init+0xec>)
     e9c:	1889      	adds	r1, r1, r2
     e9e:	898a      	ldrh	r2, [r1, #12]
     ea0:	89a3      	ldrh	r3, [r4, #12]
     ea2:	04d2      	lsls	r2, r2, #19
     ea4:	0cd2      	lsrs	r2, r2, #19
     ea6:	0b5b      	lsrs	r3, r3, #13
     ea8:	035b      	lsls	r3, r3, #13
     eaa:	4313      	orrs	r3, r2
     eac:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     eae:	7b8b      	ldrb	r3, [r1, #14]
     eb0:	2207      	movs	r2, #7
     eb2:	401a      	ands	r2, r3
     eb4:	89a3      	ldrh	r3, [r4, #12]
     eb6:	0352      	lsls	r2, r2, #13
     eb8:	04db      	lsls	r3, r3, #19
     eba:	0cdb      	lsrs	r3, r3, #19
     ebc:	4313      	orrs	r3, r2
     ebe:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     ec0:	4a07      	ldr	r2, [pc, #28]	; (ee0 <_usart_init+0xec>)
     ec2:	0083      	lsls	r3, r0, #2
     ec4:	181d      	adds	r5, r3, r0
     ec6:	00a9      	lsls	r1, r5, #2
     ec8:	000d      	movs	r5, r1
     eca:	1851      	adds	r1, r2, r1
     ecc:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
     ece:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     ed0:	1952      	adds	r2, r2, r5
     ed2:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     ed4:	2330      	movs	r3, #48	; 0x30
     ed6:	54e2      	strb	r2, [r4, r3]
}
     ed8:	2000      	movs	r0, #0
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	00000db1 	.word	0x00000db1
     ee0:	0000149c 	.word	0x0000149c

00000ee4 <_usart_async_init>:
{
     ee4:	b570      	push	{r4, r5, r6, lr}
     ee6:	0006      	movs	r6, r0
     ee8:	000c      	movs	r4, r1
	ASSERT(device);
     eea:	1e43      	subs	r3, r0, #1
     eec:	4198      	sbcs	r0, r3
     eee:	b2c0      	uxtb	r0, r0
     ef0:	22c6      	movs	r2, #198	; 0xc6
     ef2:	4919      	ldr	r1, [pc, #100]	; (f58 <_usart_async_init+0x74>)
     ef4:	4b19      	ldr	r3, [pc, #100]	; (f5c <_usart_async_init+0x78>)
     ef6:	4798      	blx	r3
	init_status = _usart_init(hw);
     ef8:	0020      	movs	r0, r4
     efa:	4b19      	ldr	r3, [pc, #100]	; (f60 <_usart_async_init+0x7c>)
     efc:	4798      	blx	r3
     efe:	1e05      	subs	r5, r0, #0
	if (init_status) {
     f00:	d001      	beq.n	f06 <_usart_async_init+0x22>
}
     f02:	0028      	movs	r0, r5
     f04:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     f06:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     f08:	0031      	movs	r1, r6
     f0a:	0020      	movs	r0, r4
     f0c:	4b15      	ldr	r3, [pc, #84]	; (f64 <_usart_async_init+0x80>)
     f0e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
     f10:	0020      	movs	r0, r4
     f12:	4b15      	ldr	r3, [pc, #84]	; (f68 <_usart_async_init+0x84>)
     f14:	4798      	blx	r3
     f16:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     f18:	2b00      	cmp	r3, #0
     f1a:	db0a      	blt.n	f32 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f1c:	211f      	movs	r1, #31
     f1e:	4001      	ands	r1, r0
     f20:	2201      	movs	r2, #1
     f22:	408a      	lsls	r2, r1
     f24:	2180      	movs	r1, #128	; 0x80
     f26:	4c11      	ldr	r4, [pc, #68]	; (f6c <_usart_async_init+0x88>)
     f28:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     f2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f2e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
     f32:	2b00      	cmp	r3, #0
     f34:	db07      	blt.n	f46 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f36:	211f      	movs	r1, #31
     f38:	4001      	ands	r1, r0
     f3a:	2201      	movs	r2, #1
     f3c:	408a      	lsls	r2, r1
     f3e:	21c0      	movs	r1, #192	; 0xc0
     f40:	0049      	lsls	r1, r1, #1
     f42:	4c0a      	ldr	r4, [pc, #40]	; (f6c <_usart_async_init+0x88>)
     f44:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
     f46:	2b00      	cmp	r3, #0
     f48:	dbdb      	blt.n	f02 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f4a:	231f      	movs	r3, #31
     f4c:	4018      	ands	r0, r3
     f4e:	3b1e      	subs	r3, #30
     f50:	4083      	lsls	r3, r0
     f52:	4a06      	ldr	r2, [pc, #24]	; (f6c <_usart_async_init+0x88>)
     f54:	6013      	str	r3, [r2, #0]
     f56:	e7d4      	b.n	f02 <_usart_async_init+0x1e>
     f58:	00001500 	.word	0x00001500
     f5c:	0000096d 	.word	0x0000096d
     f60:	00000df5 	.word	0x00000df5
     f64:	00000d79 	.word	0x00000d79
     f68:	00000da1 	.word	0x00000da1
     f6c:	e000e100 	.word	0xe000e100

00000f70 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     f70:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f72:	6813      	ldr	r3, [r2, #0]
     f74:	2102      	movs	r1, #2
     f76:	430b      	orrs	r3, r1
     f78:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f7a:	69d3      	ldr	r3, [r2, #28]
     f7c:	079b      	lsls	r3, r3, #30
     f7e:	d1fc      	bne.n	f7a <_usart_async_enable+0xa>
}
     f80:	4770      	bx	lr

00000f82 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f82:	6983      	ldr	r3, [r0, #24]
     f84:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f86:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f88:	4770      	bx	lr

00000f8a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     f8a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f8c:	2201      	movs	r2, #1
     f8e:	759a      	strb	r2, [r3, #22]
}
     f90:	4770      	bx	lr

00000f92 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     f92:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f94:	2202      	movs	r2, #2
     f96:	759a      	strb	r2, [r3, #22]
}
     f98:	4770      	bx	lr
	...

00000f9c <_usart_async_set_irq_state>:
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	0004      	movs	r4, r0
     fa0:	000d      	movs	r5, r1
     fa2:	0016      	movs	r6, r2
	ASSERT(device);
     fa4:	1e43      	subs	r3, r0, #1
     fa6:	4198      	sbcs	r0, r3
     fa8:	b2c0      	uxtb	r0, r0
     faa:	2288      	movs	r2, #136	; 0x88
     fac:	0092      	lsls	r2, r2, #2
     fae:	4917      	ldr	r1, [pc, #92]	; (100c <_usart_async_set_irq_state+0x70>)
     fb0:	4b17      	ldr	r3, [pc, #92]	; (1010 <_usart_async_set_irq_state+0x74>)
     fb2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     fb4:	2d00      	cmp	r5, #0
     fb6:	d00b      	beq.n	fd0 <_usart_async_set_irq_state+0x34>
     fb8:	2d02      	cmp	r5, #2
     fba:	d009      	beq.n	fd0 <_usart_async_set_irq_state+0x34>
	} else if (USART_ASYNC_RX_DONE == type) {
     fbc:	2d01      	cmp	r5, #1
     fbe:	d018      	beq.n	ff2 <_usart_async_set_irq_state+0x56>
	} else if (USART_ASYNC_ERROR == type) {
     fc0:	2d03      	cmp	r5, #3
     fc2:	d10f      	bne.n	fe4 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     fc4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     fc6:	2e00      	cmp	r6, #0
     fc8:	d01c      	beq.n	1004 <_usart_async_set_irq_state+0x68>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     fca:	2280      	movs	r2, #128	; 0x80
     fcc:	759a      	strb	r2, [r3, #22]
}
     fce:	e009      	b.n	fe4 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     fd0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     fd2:	2e00      	cmp	r6, #0
     fd4:	d107      	bne.n	fe6 <_usart_async_set_irq_state+0x4a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fd6:	2201      	movs	r2, #1
     fd8:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     fda:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     fdc:	2e00      	cmp	r6, #0
     fde:	d105      	bne.n	fec <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fe0:	2202      	movs	r2, #2
     fe2:	751a      	strb	r2, [r3, #20]
}
     fe4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     fe6:	2201      	movs	r2, #1
     fe8:	759a      	strb	r2, [r3, #22]
     fea:	e7f6      	b.n	fda <_usart_async_set_irq_state+0x3e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     fec:	2202      	movs	r2, #2
     fee:	759a      	strb	r2, [r3, #22]
     ff0:	e7f8      	b.n	fe4 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     ff2:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     ff4:	2e00      	cmp	r6, #0
     ff6:	d102      	bne.n	ffe <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     ff8:	2204      	movs	r2, #4
     ffa:	751a      	strb	r2, [r3, #20]
     ffc:	e7f2      	b.n	fe4 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     ffe:	2204      	movs	r2, #4
    1000:	759a      	strb	r2, [r3, #22]
    1002:	e7ef      	b.n	fe4 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1004:	2280      	movs	r2, #128	; 0x80
    1006:	751a      	strb	r2, [r3, #20]
    1008:	e7ec      	b.n	fe4 <_usart_async_set_irq_state+0x48>
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00001500 	.word	0x00001500
    1010:	0000096d 	.word	0x0000096d

00001014 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    1014:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <SERCOM0_Handler+0xc>)
    1018:	6818      	ldr	r0, [r3, #0]
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <SERCOM0_Handler+0x10>)
    101c:	4798      	blx	r3
}
    101e:	bd10      	pop	{r4, pc}
    1020:	20000470 	.word	0x20000470
    1024:	00000d15 	.word	0x00000d15

00001028 <SERCOM3_Handler>:

void SERCOM3_Handler(void)
{
    1028:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <SERCOM3_Handler+0xc>)
    102c:	6858      	ldr	r0, [r3, #4]
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <SERCOM3_Handler+0x10>)
    1030:	4798      	blx	r3
}
    1032:	bd10      	pop	{r4, pc}
    1034:	20000470 	.word	0x20000470
    1038:	00000d15 	.word	0x00000d15

0000103c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    103c:	4b0f      	ldr	r3, [pc, #60]	; (107c <_sysctrl_init_sources+0x40>)
    103e:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1040:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1042:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1044:	0f92      	lsrs	r2, r2, #30
    1046:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1048:	0409      	lsls	r1, r1, #16
    104a:	480d      	ldr	r0, [pc, #52]	; (1080 <_sysctrl_init_sources+0x44>)
    104c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    104e:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1050:	490c      	ldr	r1, [pc, #48]	; (1084 <_sysctrl_init_sources+0x48>)
    1052:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1054:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1056:	699a      	ldr	r2, [r3, #24]
    1058:	2102      	movs	r1, #2
    105a:	430a      	orrs	r2, r1
    105c:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    105e:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1060:	311d      	adds	r1, #29
    1062:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1064:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <_sysctrl_init_sources+0x40>)
    1068:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    106a:	071b      	lsls	r3, r3, #28
    106c:	d5fb      	bpl.n	1066 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    106e:	4a03      	ldr	r2, [pc, #12]	; (107c <_sysctrl_init_sources+0x40>)
    1070:	6a13      	ldr	r3, [r2, #32]
    1072:	2180      	movs	r1, #128	; 0x80
    1074:	430b      	orrs	r3, r1
    1076:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1078:	4770      	bx	lr
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	40000800 	.word	0x40000800
    1080:	0fff0000 	.word	0x0fff0000
    1084:	00000302 	.word	0x00000302

00001088 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1088:	4a02      	ldr	r2, [pc, #8]	; (1094 <_sysctrl_init_referenced_generators+0xc>)
    108a:	6993      	ldr	r3, [r2, #24]
    108c:	2102      	movs	r1, #2
    108e:	438b      	bics	r3, r1
    1090:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1092:	4770      	bx	lr
    1094:	40000800 	.word	0x40000800

00001098 <_ZL16tx_cb_serial_knxPK22usart_async_descriptor>:
#include <atmel_start.h>

static void tx_cb_serial_knx(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
    1098:	4770      	bx	lr

0000109a <_ZL16tx_cb_serial_bsmPK22usart_async_descriptor>:


static void tx_cb_serial_bsm(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
    109a:	4770      	bx	lr

0000109c <_ZL14TIMER_task1_cbPK10timer_task>:
 * Example of using TIMER.
 */
static void TIMER_task1_cb(const struct timer_task *const timer_task)
{
	//gpio_toggle_pin_level(myLed);
}
    109c:	4770      	bx	lr

0000109e <_ZL14TIMER_task2_cbPK10timer_task>:

static void TIMER_task2_cb(const struct timer_task *const timer_task)
{
}
    109e:	4770      	bx	lr

000010a0 <_ZL16rx_cb_serial_knxPK22usart_async_descriptor>:
{
    10a0:	b510      	push	{r4, lr}
    10a2:	b082      	sub	sp, #8
	count = io_read(&serial_knx.io, &ch, 1);
    10a4:	466b      	mov	r3, sp
    10a6:	1ddc      	adds	r4, r3, #7
    10a8:	2201      	movs	r2, #1
    10aa:	0021      	movs	r1, r4
    10ac:	4809      	ldr	r0, [pc, #36]	; (10d4 <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x34>)
    10ae:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x38>)
    10b0:	4798      	blx	r3
	knx_testArray[knx_ptr] = ch;
    10b2:	4a0a      	ldr	r2, [pc, #40]	; (10dc <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x3c>)
    10b4:	7813      	ldrb	r3, [r2, #0]
    10b6:	7820      	ldrb	r0, [r4, #0]
    10b8:	18d1      	adds	r1, r2, r3
    10ba:	7108      	strb	r0, [r1, #4]
	knx_ptr++;
    10bc:	3301      	adds	r3, #1
    10be:	b2db      	uxtb	r3, r3
    10c0:	7013      	strb	r3, [r2, #0]
	if (knx_ptr == 9)
    10c2:	2b09      	cmp	r3, #9
    10c4:	d001      	beq.n	10ca <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x2a>
}
    10c6:	b002      	add	sp, #8
    10c8:	bd10      	pop	{r4, pc}
		knx_ptr = 0;
    10ca:	2200      	movs	r2, #0
    10cc:	4b03      	ldr	r3, [pc, #12]	; (10dc <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x3c>)
    10ce:	701a      	strb	r2, [r3, #0]
}
    10d0:	e7f9      	b.n	10c6 <_ZL16rx_cb_serial_knxPK22usart_async_descriptor+0x26>
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	20000544 	.word	0x20000544
    10d8:	0000046d 	.word	0x0000046d
    10dc:	20000478 	.word	0x20000478

000010e0 <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor>:
{
    10e0:	b510      	push	{r4, lr}
    10e2:	b082      	sub	sp, #8
	count = io_read(&serial_bsm.io, &ch, 1);
    10e4:	466b      	mov	r3, sp
    10e6:	1ddc      	adds	r4, r3, #7
    10e8:	2201      	movs	r2, #1
    10ea:	0021      	movs	r1, r4
    10ec:	4809      	ldr	r0, [pc, #36]	; (1114 <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x34>)
    10ee:	4b0a      	ldr	r3, [pc, #40]	; (1118 <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x38>)
    10f0:	4798      	blx	r3
	testArray[ptr] = ch;
    10f2:	4a0a      	ldr	r2, [pc, #40]	; (111c <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x3c>)
    10f4:	7b53      	ldrb	r3, [r2, #13]
    10f6:	7820      	ldrb	r0, [r4, #0]
    10f8:	18d1      	adds	r1, r2, r3
    10fa:	7408      	strb	r0, [r1, #16]
	ptr++;
    10fc:	3301      	adds	r3, #1
    10fe:	b2db      	uxtb	r3, r3
    1100:	7353      	strb	r3, [r2, #13]
	if (ptr == 9)
    1102:	2b09      	cmp	r3, #9
    1104:	d001      	beq.n	110a <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x2a>
}
    1106:	b002      	add	sp, #8
    1108:	bd10      	pop	{r4, pc}
		ptr = 0;
    110a:	2200      	movs	r2, #0
    110c:	4b03      	ldr	r3, [pc, #12]	; (111c <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x3c>)
    110e:	735a      	strb	r2, [r3, #13]
}
    1110:	e7f9      	b.n	1106 <_ZL16rx_cb_serial_bsmPK22usart_async_descriptor+0x26>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	200004f4 	.word	0x200004f4
    1118:	0000046d 	.word	0x0000046d
    111c:	20000478 	.word	0x20000478

00001120 <_Z15serial_knx_Initv>:
{
    1120:	b530      	push	{r4, r5, lr}
    1122:	b083      	sub	sp, #12
	usart_async_register_callback(&serial_knx, USART_ASYNC_TXC_CB, tx_cb_serial_knx);
    1124:	4c09      	ldr	r4, [pc, #36]	; (114c <_Z15serial_knx_Initv+0x2c>)
    1126:	4a0a      	ldr	r2, [pc, #40]	; (1150 <_Z15serial_knx_Initv+0x30>)
    1128:	2101      	movs	r1, #1
    112a:	0020      	movs	r0, r4
    112c:	4d09      	ldr	r5, [pc, #36]	; (1154 <_Z15serial_knx_Initv+0x34>)
    112e:	47a8      	blx	r5
	usart_async_register_callback(&serial_knx, USART_ASYNC_RXC_CB, rx_cb_serial_knx);
    1130:	4a09      	ldr	r2, [pc, #36]	; (1158 <_Z15serial_knx_Initv+0x38>)
    1132:	2100      	movs	r1, #0
    1134:	0020      	movs	r0, r4
    1136:	47a8      	blx	r5
	usart_async_get_io_descriptor(&serial_knx, &io);
    1138:	a901      	add	r1, sp, #4
    113a:	0020      	movs	r0, r4
    113c:	4b07      	ldr	r3, [pc, #28]	; (115c <_Z15serial_knx_Initv+0x3c>)
    113e:	4798      	blx	r3
	usart_async_enable(&serial_knx);
    1140:	0020      	movs	r0, r4
    1142:	4b07      	ldr	r3, [pc, #28]	; (1160 <_Z15serial_knx_Initv+0x40>)
    1144:	4798      	blx	r3
}
    1146:	b003      	add	sp, #12
    1148:	bd30      	pop	{r4, r5, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	20000544 	.word	0x20000544
    1150:	00001099 	.word	0x00001099
    1154:	000008f5 	.word	0x000008f5
    1158:	000010a1 	.word	0x000010a1
    115c:	000008c5 	.word	0x000008c5
    1160:	00000899 	.word	0x00000899

00001164 <_Z15serial_bsm_Initv>:
{
    1164:	b530      	push	{r4, r5, lr}
    1166:	b083      	sub	sp, #12
	usart_async_register_callback(&serial_bsm, USART_ASYNC_TXC_CB, tx_cb_serial_bsm);
    1168:	4c09      	ldr	r4, [pc, #36]	; (1190 <_Z15serial_bsm_Initv+0x2c>)
    116a:	4a0a      	ldr	r2, [pc, #40]	; (1194 <_Z15serial_bsm_Initv+0x30>)
    116c:	2101      	movs	r1, #1
    116e:	0020      	movs	r0, r4
    1170:	4d09      	ldr	r5, [pc, #36]	; (1198 <_Z15serial_bsm_Initv+0x34>)
    1172:	47a8      	blx	r5
	usart_async_register_callback(&serial_bsm, USART_ASYNC_RXC_CB, rx_cb_serial_bsm);
    1174:	4a09      	ldr	r2, [pc, #36]	; (119c <_Z15serial_bsm_Initv+0x38>)
    1176:	2100      	movs	r1, #0
    1178:	0020      	movs	r0, r4
    117a:	47a8      	blx	r5
	usart_async_get_io_descriptor(&serial_bsm, &io);
    117c:	a901      	add	r1, sp, #4
    117e:	0020      	movs	r0, r4
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <_Z15serial_bsm_Initv+0x3c>)
    1182:	4798      	blx	r3
	usart_async_enable(&serial_bsm);
    1184:	0020      	movs	r0, r4
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <_Z15serial_bsm_Initv+0x40>)
    1188:	4798      	blx	r3
}
    118a:	b003      	add	sp, #12
    118c:	bd30      	pop	{r4, r5, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	200004f4 	.word	0x200004f4
    1194:	0000109b 	.word	0x0000109b
    1198:	000008f5 	.word	0x000008f5
    119c:	000010e1 	.word	0x000010e1
    11a0:	000008c5 	.word	0x000008c5
    11a4:	00000899 	.word	0x00000899

000011a8 <_Z10TIMER_Initv>:

void TIMER_Init(void)
{
    11a8:	b570      	push	{r4, r5, r6, lr}
	TIMER_task1.interval = 100;
    11aa:	490d      	ldr	r1, [pc, #52]	; (11e0 <_Z10TIMER_Initv+0x38>)
    11ac:	2364      	movs	r3, #100	; 0x64
    11ae:	624b      	str	r3, [r1, #36]	; 0x24
	TIMER_task1.cb       = TIMER_task1_cb;
    11b0:	4b0c      	ldr	r3, [pc, #48]	; (11e4 <_Z10TIMER_Initv+0x3c>)
    11b2:	628b      	str	r3, [r1, #40]	; 0x28
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    11b4:	2301      	movs	r3, #1
    11b6:	222c      	movs	r2, #44	; 0x2c
    11b8:	548b      	strb	r3, [r1, r2]
	TIMER_task2.interval = 200;
    11ba:	329c      	adds	r2, #156	; 0x9c
    11bc:	638a      	str	r2, [r1, #56]	; 0x38
	TIMER_task2.cb       = TIMER_task2_cb;
    11be:	4a0a      	ldr	r2, [pc, #40]	; (11e8 <_Z10TIMER_Initv+0x40>)
    11c0:	63ca      	str	r2, [r1, #60]	; 0x3c
	TIMER_task2.mode     = TIMER_TASK_REPEAT;
    11c2:	000e      	movs	r6, r1
    11c4:	3630      	adds	r6, #48	; 0x30
    11c6:	7433      	strb	r3, [r6, #16]

	timer_add_task(&TIMER, &TIMER_task1);
    11c8:	311c      	adds	r1, #28
    11ca:	4c08      	ldr	r4, [pc, #32]	; (11ec <_Z10TIMER_Initv+0x44>)
    11cc:	0020      	movs	r0, r4
    11ce:	4d08      	ldr	r5, [pc, #32]	; (11f0 <_Z10TIMER_Initv+0x48>)
    11d0:	47a8      	blx	r5
	timer_add_task(&TIMER, &TIMER_task2);
    11d2:	0031      	movs	r1, r6
    11d4:	0020      	movs	r0, r4
    11d6:	47a8      	blx	r5
	timer_start(&TIMER);
    11d8:	0020      	movs	r0, r4
    11da:	4b06      	ldr	r3, [pc, #24]	; (11f4 <_Z10TIMER_Initv+0x4c>)
    11dc:	4798      	blx	r3
}
    11de:	bd70      	pop	{r4, r5, r6, pc}
    11e0:	20000478 	.word	0x20000478
    11e4:	0000109d 	.word	0x0000109d
    11e8:	0000109f 	.word	0x0000109f
    11ec:	200004bc 	.word	0x200004bc
    11f0:	000005e1 	.word	0x000005e1
    11f4:	000005a5 	.word	0x000005a5

000011f8 <main>:




int main(void)
{
    11f8:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    11fa:	4b04      	ldr	r3, [pc, #16]	; (120c <main+0x14>)
    11fc:	4798      	blx	r3
	serial_knx_Init();
    11fe:	4b04      	ldr	r3, [pc, #16]	; (1210 <main+0x18>)
    1200:	4798      	blx	r3
	serial_bsm_Init();
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <main+0x1c>)
    1204:	4798      	blx	r3
	TIMER_Init();
    1206:	4b04      	ldr	r3, [pc, #16]	; (1218 <main+0x20>)
    1208:	4798      	blx	r3
    120a:	e7fe      	b.n	120a <main+0x12>
    120c:	00000115 	.word	0x00000115
    1210:	00001121 	.word	0x00001121
    1214:	00001165 	.word	0x00001165
    1218:	000011a9 	.word	0x000011a9

0000121c <__libc_init_array>:
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	4e0d      	ldr	r6, [pc, #52]	; (1254 <__libc_init_array+0x38>)
    1220:	4d0d      	ldr	r5, [pc, #52]	; (1258 <__libc_init_array+0x3c>)
    1222:	2400      	movs	r4, #0
    1224:	1bad      	subs	r5, r5, r6
    1226:	10ad      	asrs	r5, r5, #2
    1228:	d005      	beq.n	1236 <__libc_init_array+0x1a>
    122a:	00a3      	lsls	r3, r4, #2
    122c:	58f3      	ldr	r3, [r6, r3]
    122e:	3401      	adds	r4, #1
    1230:	4798      	blx	r3
    1232:	42a5      	cmp	r5, r4
    1234:	d1f9      	bne.n	122a <__libc_init_array+0xe>
    1236:	f000 f973 	bl	1520 <_init>
    123a:	4e08      	ldr	r6, [pc, #32]	; (125c <__libc_init_array+0x40>)
    123c:	4d08      	ldr	r5, [pc, #32]	; (1260 <__libc_init_array+0x44>)
    123e:	2400      	movs	r4, #0
    1240:	1bad      	subs	r5, r5, r6
    1242:	10ad      	asrs	r5, r5, #2
    1244:	d005      	beq.n	1252 <__libc_init_array+0x36>
    1246:	00a3      	lsls	r3, r4, #2
    1248:	58f3      	ldr	r3, [r6, r3]
    124a:	3401      	adds	r4, #1
    124c:	4798      	blx	r3
    124e:	42a5      	cmp	r5, r4
    1250:	d1f9      	bne.n	1246 <__libc_init_array+0x2a>
    1252:	bd70      	pop	{r4, r5, r6, pc}
    1254:	0000152c 	.word	0x0000152c
    1258:	0000152c 	.word	0x0000152c
    125c:	0000152c 	.word	0x0000152c
    1260:	00001534 	.word	0x00001534

00001264 <register_fini>:
    1264:	4b03      	ldr	r3, [pc, #12]	; (1274 <register_fini+0x10>)
    1266:	b510      	push	{r4, lr}
    1268:	2b00      	cmp	r3, #0
    126a:	d002      	beq.n	1272 <register_fini+0xe>
    126c:	4802      	ldr	r0, [pc, #8]	; (1278 <register_fini+0x14>)
    126e:	f000 f805 	bl	127c <atexit>
    1272:	bd10      	pop	{r4, pc}
    1274:	00000000 	.word	0x00000000
    1278:	0000128d 	.word	0x0000128d

0000127c <atexit>:
    127c:	b510      	push	{r4, lr}
    127e:	0001      	movs	r1, r0
    1280:	2300      	movs	r3, #0
    1282:	2200      	movs	r2, #0
    1284:	2000      	movs	r0, #0
    1286:	f000 f81f 	bl	12c8 <__register_exitproc>
    128a:	bd10      	pop	{r4, pc}

0000128c <__libc_fini_array>:
    128c:	b570      	push	{r4, r5, r6, lr}
    128e:	4b09      	ldr	r3, [pc, #36]	; (12b4 <__libc_fini_array+0x28>)
    1290:	4c09      	ldr	r4, [pc, #36]	; (12b8 <__libc_fini_array+0x2c>)
    1292:	1ae4      	subs	r4, r4, r3
    1294:	10a4      	asrs	r4, r4, #2
    1296:	d009      	beq.n	12ac <__libc_fini_array+0x20>
    1298:	4a08      	ldr	r2, [pc, #32]	; (12bc <__libc_fini_array+0x30>)
    129a:	18a5      	adds	r5, r4, r2
    129c:	00ad      	lsls	r5, r5, #2
    129e:	18ed      	adds	r5, r5, r3
    12a0:	682b      	ldr	r3, [r5, #0]
    12a2:	3c01      	subs	r4, #1
    12a4:	4798      	blx	r3
    12a6:	3d04      	subs	r5, #4
    12a8:	2c00      	cmp	r4, #0
    12aa:	d1f9      	bne.n	12a0 <__libc_fini_array+0x14>
    12ac:	f000 f942 	bl	1534 <_fini>
    12b0:	bd70      	pop	{r4, r5, r6, pc}
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	00001540 	.word	0x00001540
    12b8:	00001544 	.word	0x00001544
    12bc:	3fffffff 	.word	0x3fffffff

000012c0 <__retarget_lock_acquire_recursive>:
    12c0:	4770      	bx	lr
    12c2:	46c0      	nop			; (mov r8, r8)

000012c4 <__retarget_lock_release_recursive>:
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)

000012c8 <__register_exitproc>:
    12c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ca:	464e      	mov	r6, r9
    12cc:	4645      	mov	r5, r8
    12ce:	46de      	mov	lr, fp
    12d0:	4657      	mov	r7, sl
    12d2:	b5e0      	push	{r5, r6, r7, lr}
    12d4:	4d36      	ldr	r5, [pc, #216]	; (13b0 <__register_exitproc+0xe8>)
    12d6:	b083      	sub	sp, #12
    12d8:	0006      	movs	r6, r0
    12da:	6828      	ldr	r0, [r5, #0]
    12dc:	4698      	mov	r8, r3
    12de:	000f      	movs	r7, r1
    12e0:	4691      	mov	r9, r2
    12e2:	f7ff ffed 	bl	12c0 <__retarget_lock_acquire_recursive>
    12e6:	4b33      	ldr	r3, [pc, #204]	; (13b4 <__register_exitproc+0xec>)
    12e8:	681c      	ldr	r4, [r3, #0]
    12ea:	23a4      	movs	r3, #164	; 0xa4
    12ec:	005b      	lsls	r3, r3, #1
    12ee:	58e0      	ldr	r0, [r4, r3]
    12f0:	2800      	cmp	r0, #0
    12f2:	d052      	beq.n	139a <__register_exitproc+0xd2>
    12f4:	6843      	ldr	r3, [r0, #4]
    12f6:	2b1f      	cmp	r3, #31
    12f8:	dc13      	bgt.n	1322 <__register_exitproc+0x5a>
    12fa:	1c5a      	adds	r2, r3, #1
    12fc:	9201      	str	r2, [sp, #4]
    12fe:	2e00      	cmp	r6, #0
    1300:	d128      	bne.n	1354 <__register_exitproc+0x8c>
    1302:	9a01      	ldr	r2, [sp, #4]
    1304:	3302      	adds	r3, #2
    1306:	009b      	lsls	r3, r3, #2
    1308:	6042      	str	r2, [r0, #4]
    130a:	501f      	str	r7, [r3, r0]
    130c:	6828      	ldr	r0, [r5, #0]
    130e:	f7ff ffd9 	bl	12c4 <__retarget_lock_release_recursive>
    1312:	2000      	movs	r0, #0
    1314:	b003      	add	sp, #12
    1316:	bc3c      	pop	{r2, r3, r4, r5}
    1318:	4690      	mov	r8, r2
    131a:	4699      	mov	r9, r3
    131c:	46a2      	mov	sl, r4
    131e:	46ab      	mov	fp, r5
    1320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1322:	4b25      	ldr	r3, [pc, #148]	; (13b8 <__register_exitproc+0xf0>)
    1324:	2b00      	cmp	r3, #0
    1326:	d03d      	beq.n	13a4 <__register_exitproc+0xdc>
    1328:	20c8      	movs	r0, #200	; 0xc8
    132a:	0040      	lsls	r0, r0, #1
    132c:	e000      	b.n	1330 <__register_exitproc+0x68>
    132e:	bf00      	nop
    1330:	2800      	cmp	r0, #0
    1332:	d037      	beq.n	13a4 <__register_exitproc+0xdc>
    1334:	22a4      	movs	r2, #164	; 0xa4
    1336:	2300      	movs	r3, #0
    1338:	0052      	lsls	r2, r2, #1
    133a:	58a1      	ldr	r1, [r4, r2]
    133c:	6043      	str	r3, [r0, #4]
    133e:	6001      	str	r1, [r0, #0]
    1340:	50a0      	str	r0, [r4, r2]
    1342:	3240      	adds	r2, #64	; 0x40
    1344:	5083      	str	r3, [r0, r2]
    1346:	3204      	adds	r2, #4
    1348:	5083      	str	r3, [r0, r2]
    134a:	3301      	adds	r3, #1
    134c:	9301      	str	r3, [sp, #4]
    134e:	2300      	movs	r3, #0
    1350:	2e00      	cmp	r6, #0
    1352:	d0d6      	beq.n	1302 <__register_exitproc+0x3a>
    1354:	009a      	lsls	r2, r3, #2
    1356:	4692      	mov	sl, r2
    1358:	4482      	add	sl, r0
    135a:	464a      	mov	r2, r9
    135c:	2188      	movs	r1, #136	; 0x88
    135e:	4654      	mov	r4, sl
    1360:	5062      	str	r2, [r4, r1]
    1362:	22c4      	movs	r2, #196	; 0xc4
    1364:	0052      	lsls	r2, r2, #1
    1366:	4691      	mov	r9, r2
    1368:	4481      	add	r9, r0
    136a:	464a      	mov	r2, r9
    136c:	3987      	subs	r1, #135	; 0x87
    136e:	4099      	lsls	r1, r3
    1370:	6812      	ldr	r2, [r2, #0]
    1372:	468b      	mov	fp, r1
    1374:	430a      	orrs	r2, r1
    1376:	4694      	mov	ip, r2
    1378:	464a      	mov	r2, r9
    137a:	4661      	mov	r1, ip
    137c:	6011      	str	r1, [r2, #0]
    137e:	2284      	movs	r2, #132	; 0x84
    1380:	4641      	mov	r1, r8
    1382:	0052      	lsls	r2, r2, #1
    1384:	50a1      	str	r1, [r4, r2]
    1386:	2e02      	cmp	r6, #2
    1388:	d1bb      	bne.n	1302 <__register_exitproc+0x3a>
    138a:	0002      	movs	r2, r0
    138c:	465c      	mov	r4, fp
    138e:	328d      	adds	r2, #141	; 0x8d
    1390:	32ff      	adds	r2, #255	; 0xff
    1392:	6811      	ldr	r1, [r2, #0]
    1394:	430c      	orrs	r4, r1
    1396:	6014      	str	r4, [r2, #0]
    1398:	e7b3      	b.n	1302 <__register_exitproc+0x3a>
    139a:	0020      	movs	r0, r4
    139c:	304d      	adds	r0, #77	; 0x4d
    139e:	30ff      	adds	r0, #255	; 0xff
    13a0:	50e0      	str	r0, [r4, r3]
    13a2:	e7a7      	b.n	12f4 <__register_exitproc+0x2c>
    13a4:	6828      	ldr	r0, [r5, #0]
    13a6:	f7ff ff8d 	bl	12c4 <__retarget_lock_release_recursive>
    13aa:	2001      	movs	r0, #1
    13ac:	4240      	negs	r0, r0
    13ae:	e7b1      	b.n	1314 <__register_exitproc+0x4c>
    13b0:	20000428 	.word	0x20000428
    13b4:	0000151c 	.word	0x0000151c
    13b8:	00000000 	.word	0x00000000
    13bc:	682f2e2e 	.word	0x682f2e2e
    13c0:	732f6c61 	.word	0x732f6c61
    13c4:	682f6372 	.word	0x682f6372
    13c8:	665f6c61 	.word	0x665f6c61
    13cc:	6873616c 	.word	0x6873616c
    13d0:	0000632e 	.word	0x0000632e
    13d4:	682f2e2e 	.word	0x682f2e2e
    13d8:	732f6c61 	.word	0x732f6c61
    13dc:	682f6372 	.word	0x682f6372
    13e0:	695f6c61 	.word	0x695f6c61
    13e4:	00632e6f 	.word	0x00632e6f
    13e8:	682f2e2e 	.word	0x682f2e2e
    13ec:	732f6c61 	.word	0x732f6c61
    13f0:	682f6372 	.word	0x682f6372
    13f4:	745f6c61 	.word	0x745f6c61
    13f8:	72656d69 	.word	0x72656d69
    13fc:	0000632e 	.word	0x0000632e
    1400:	682f2e2e 	.word	0x682f2e2e
    1404:	732f6c61 	.word	0x732f6c61
    1408:	682f6372 	.word	0x682f6372
    140c:	755f6c61 	.word	0x755f6c61
    1410:	74726173 	.word	0x74726173
    1414:	7973615f 	.word	0x7973615f
    1418:	632e636e 	.word	0x632e636e
    141c:	00000000 	.word	0x00000000
    1420:	682f2e2e 	.word	0x682f2e2e
    1424:	752f6c61 	.word	0x752f6c61
    1428:	736c6974 	.word	0x736c6974
    142c:	6372732f 	.word	0x6372732f
    1430:	6974752f 	.word	0x6974752f
    1434:	6c5f736c 	.word	0x6c5f736c
    1438:	2e747369 	.word	0x2e747369
    143c:	00000063 	.word	0x00000063
    1440:	682f2e2e 	.word	0x682f2e2e
    1444:	752f6c61 	.word	0x752f6c61
    1448:	736c6974 	.word	0x736c6974
    144c:	6372732f 	.word	0x6372732f
    1450:	6974752f 	.word	0x6974752f
    1454:	725f736c 	.word	0x725f736c
    1458:	62676e69 	.word	0x62676e69
    145c:	65666675 	.word	0x65666675
    1460:	00632e72 	.word	0x00632e72
    1464:	682f2e2e 	.word	0x682f2e2e
    1468:	6e2f6c70 	.word	0x6e2f6c70
    146c:	74636d76 	.word	0x74636d76
    1470:	682f6c72 	.word	0x682f6c72
    1474:	6e5f6c70 	.word	0x6e5f6c70
    1478:	74636d76 	.word	0x74636d76
    147c:	632e6c72 	.word	0x632e6c72
    1480:	00000000 	.word	0x00000000
    1484:	682f2e2e 	.word	0x682f2e2e
    1488:	722f6c70 	.word	0x722f6c70
    148c:	682f6374 	.word	0x682f6374
    1490:	725f6c70 	.word	0x725f6c70
    1494:	632e6374 	.word	0x632e6374
    1498:	00000000 	.word	0x00000000

0000149c <_usarts>:
    149c:	00000000 41100004 00030000 0000d8ad     .......A........
    14ac:	00000000 00000003 40100004 00030000     ...........@....
    14bc:	0000d8ad 00000000                       ........

000014c4 <_i2cms>:
	...

000014dc <_i2css>:
	...

000014ec <sercomspi_regs>:
	...
    1500:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1510:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0000151c <_global_impure_ptr>:
    151c:	20000000                                ... 

00001520 <_init>:
    1520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1526:	bc08      	pop	{r3}
    1528:	469e      	mov	lr, r3
    152a:	4770      	bx	lr

0000152c <__init_array_start>:
    152c:	00001265 	.word	0x00001265

00001530 <__frame_dummy_init_array_entry>:
    1530:	000000dd                                ....

00001534 <_fini>:
    1534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	bcf8      	pop	{r3, r4, r5, r6, r7}
    153a:	bc08      	pop	{r3}
    153c:	469e      	mov	lr, r3
    153e:	4770      	bx	lr

00001540 <__fini_array_start>:
    1540:	000000b5 	.word	0x000000b5
